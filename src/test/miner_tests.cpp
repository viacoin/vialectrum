// Copyright (c) 2011-2015 The Bitcoin Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include "chainparams.h"
#include "coins.h"
#include "consensus/consensus.h"
#include "consensus/merkle.h"
#include "consensus/validation.h"
#include "main.h"
#include "miner.h"
#include "pubkey.h"
#include "script/standard.h"
#include "txmempool.h"
#include "uint256.h"
#include "util.h"
#include "utilstrencodings.h"

#include "test/test_bitcoin.h"

#include <boost/test/unit_test.hpp>

BOOST_FIXTURE_TEST_SUITE(miner_tests, TestingSetup)

static
struct {
    unsigned char extranonce;
    unsigned int nonce;
} blockinfo[] = {
    {0, 0x70cdc900}, {0, 0xd8784400}, {0, 0x51040200}, {0, 0xdf8f2300}, {0, 0x59de0f00}, {0, 0xd5148400}, {0, 0x82252e00}, {0, 0xb28fce00},
    {0, 0xb85bb700}, {0, 0x74269700}, {0, 0x93c97b00}, {0, 0xb1410a00}, {0, 0x6d615f00}, {0, 0x54062800}, {0, 0xd0ff0f00}, {0, 0x022a5a00},
    {0, 0x21a63b00}, {0, 0xdd64a400}, {0, 0x77630300}, {0, 0x846ba301}, {0, 0x64c20a00}, {0, 0xd4830800}, {0, 0x241d1e00}, {0, 0xbc1c2500},
    {0, 0x331f2100}, {0, 0x9fd0db00}, {0, 0x065f1503}, {0, 0x27a12c00}, {0, 0x3e2c6100}, {0, 0x898fc301}, {0, 0x56ab6c00}, {0, 0x8c564800},
    {0, 0x9ef47a00}, {0, 0xceff3500}, {0, 0xc82e0e00}, {0, 0x1806b201}, {0, 0xd6ed1e00}, {0, 0x089dc200}, {0, 0xe9ba0400}, {0, 0x1449d100},
    {0, 0x276a2c00}, {0, 0x281ed100}, {0, 0x33659e00}, {0, 0xc6365800}, {0, 0xd052b901}, {0, 0xdb556d00}, {0, 0xf2f2c500}, {0, 0x9ae67801},
    {0, 0x6f6c0f00}, {0, 0x4b849000}, {0, 0x1bd13d00}, {0, 0x5d16e700}, {0, 0xafeb8600}, {0, 0x4ab11100}, {0, 0x9dcc4d00}, {0, 0x66fa3500},
    {0, 0x1a2ebe00}, {0, 0xdadd8d01}, {0, 0x534a2900}, {0, 0x5403e100}, {0, 0xc9e86e00}, {0, 0xabc33d00}, {0, 0x0de56900}, {0, 0xb3034b00},
    {0, 0x36e04e00}, {0, 0xd212c900}, {0, 0x61726e00}, {0, 0x23834300}, {0, 0xb3830400}, {0, 0x33ae1900}, {0, 0x0232eb00}, {0, 0xdab17001},
    {0, 0x09a21000}, {0, 0x67be0300}, {0, 0x1f112c00}, {0, 0xb5a44600}, {0, 0x3e850500}, {0, 0x27f05f00}, {0, 0xe41b0f00}, {0, 0x8c578300},
    {0, 0x1c404f00}, {0, 0xbf59e300}, {0, 0x7166de00}, {0, 0x575d3200}, {0, 0xf362c900}, {0, 0xf4792300}, {0, 0x93c55c00}, {0, 0x6bec7900},
    {0, 0xae521b00}, {0, 0xf3122600}, {0, 0xefff0900}, {0, 0x7133a000}, {0, 0x157e0901}, {0, 0xa0152a00}, {0, 0xe25d8300}, {0, 0x590a9e00},
    {0, 0xfb0ffc00}, {0, 0xd44eb800}, {0, 0x3ffe1a00}, {0, 0x70a30a00}, {0, 0x789da200}, {0, 0x54199a00}, {0, 0x0bacb900}, {0, 0x4ff56700},
    {0, 0x0e8fcc00}, {0, 0x07a70f00}, {0, 0xd049b101}, {0, 0x65961f01}, {0, 0xc5893900}, {0, 0x8bbb0400}, {0, 0xd18fde00}, {0, 0x7f9f8000},
    {0, 0x656b1701}, {0, 0x2a072000}, {0, 0x86d90000}, {0, 0x1d364f00}, {0, 0x1ac3cd00}, {0, 0x7a843500}, {0, 0x8d61c200}, {0, 0xdd66c300},
    {0, 0xac9dde00}, {0, 0x2c901c00}, {0, 0x10961100}, {0, 0xacf25e00}, {0, 0x06b05b00}, {0, 0x41a0bb00}, {0, 0x0f7e0f00}, {0, 0x1c299000},
    {0, 0xc00afc00}, {0, 0x101c4301}, {0, 0xa9aa9900}, {0, 0xdbaf6300}, {0, 0x372fa800}, {0, 0x05c91e00}, {0, 0xa4e97401}, {0, 0x5c649400},
    {0, 0x47053f00}, {0, 0xe3f42600}, {0, 0xb9820100}, {0, 0xcaa20500}, {0, 0x13829f00}, {0, 0xfecfba00}, {0, 0x97851e02}, {0, 0x3ff89d00},
    {0, 0x2c622d00}, {0, 0x29fc0500}, {0, 0x9f909000}, {0, 0x2a3e5f00}, {0, 0x45ff0e00}, {0, 0xff420800}, {0, 0x4be5ee00}, {0, 0xb0801800},
    {0, 0x65ed6600}, {0, 0xa2615000}, {0, 0x9a031500}, {0, 0x6278d900}, {0, 0x2c442800}, {0, 0xd9773200}, {0, 0xaf993a00}, {0, 0x7e187c01},
    {0, 0x5261c000}, {0, 0x61cb4800}, {0, 0x63583600}, {0, 0xb4e10300}, {0, 0xab192800}, {0, 0x281e3e00}, {0, 0x241f0e00}, {0, 0x87d34300},
    {0, 0xfac37400}, {0, 0x92f40800}, {0, 0xda55c900}, {0, 0xc5ce3300}, {0, 0x59f16801}, {0, 0x63f81d00}, {0, 0xb6953700}, {0, 0xac550800},
    {0, 0xba341000}, {0, 0x064e1000}, {0, 0x809eaf00}, {0, 0x7e72be00}, {0, 0xdf310300}, {0, 0xfb9e2500}, {0, 0xd1d70a00}, {0, 0xa4635e00},
    {0, 0x37f93700}, {0, 0xb6ebb101}, {0, 0x0eac1000}, {0, 0xcd38b600}, {0, 0x0ec87c00}, {0, 0x49520000}, {0, 0x81eb2500}, {0, 0x7e108200},
    {0, 0x12d65601}, {0, 0xda784100}, {0, 0xff621500}, {0, 0x97386c01}, {0, 0xa0294a00}, {0, 0xb5665100}, {0, 0xbcd21f00}, {0, 0x3a0fbc01},
    {0, 0xfb895100}, {0, 0x9f218500}, {0, 0x7f8f8700}, {0, 0xf8e33f00}, {0, 0x0bc96b00}, {0, 0x5f227300}, {0, 0xd6483e00}, {0, 0xbf403300},
    {0, 0xbc986f00}, {0, 0xdc815200}, {0, 0x6ba80f00}, {0, 0xf9081200}, {0, 0xcd0ebf00}, {0, 0xa27f6400}, {0, 0x2e0d6d00}, {0, 0x42456500},
    {0, 0x6ef33f00}, {0, 0x868d7d00}, {0, 0x131dbe00}, {0, 0xc61c5d00}, {0, 0xba8d2600}, {0, 0x45692200}, {0, 0x0d802f00}, {0, 0x2e973600},
    {0, 0x0e1b7200}, {0, 0x4f8d0600}, {0, 0x3cba6700}, {0, 0x82cb0b00}, {0, 0xfd8e6e01}, {0, 0xb1359e00}, {0, 0x12b10400}, {0, 0x0e640b01},
    {0, 0x77932200}, {0, 0x9c692b00}, {0, 0xb75f0000}, {0, 0x97571800}, {0, 0x3bf26400}, {0, 0x26774600}, {0, 0x8e700800}, {0, 0x70711f00},
    {0, 0x26110c00}, {0, 0x12282500}, {0, 0x969b1200}, {0, 0xdd733400}, {0, 0xf1b22e00}, {0, 0xe9295100}, {0, 0x51f09300}, {0, 0x99be1700},
    {0, 0x005b1f00}, {0, 0x073dc100}, {0, 0x91164802}, {0, 0x38df7000}, {0, 0x46416e01}, {0, 0x347d6500}, {0, 0x976b1500}, {0, 0x8e901300},
    {0, 0x7edd1a00}, {0, 0xd10d2300}, {0, 0xca893100}, {0, 0xe1b1a300}, {0, 0xf0cc5400}, {0, 0x96e27f00}, {0, 0xde561c00}, {0, 0xe73a6000},
    {0, 0x4ab9b600}, {0, 0x29980100}, {0, 0xb3b29b00}, {0, 0xe31f1700}, {0, 0xe6742900}, {0, 0x81fd2100}, {0, 0x121ce800}, {0, 0xee712200},
    {0, 0x79ba4700}, {0, 0xa8c4ab00}, {0, 0x1e044600}, {0, 0x6554a700}, {0, 0x8b8fae00}, {0, 0xb5113802}, {0, 0xa4ca5400}, {0, 0xd75a8000},
    {0, 0xf1070c00}, {0, 0x45b31400}, {0, 0xf3d8e800}, {0, 0xaea69400}, {0, 0x406a0600}, {0, 0x83a42400}, {0, 0x00958700}, {0, 0x66e42500},
    {0, 0xe3806300}, {0, 0xd4e11e00}, {0, 0xbe093500}, {0, 0x0fb33e00}, {0, 0xc9964300}, {0, 0xb8fa1d00}, {0, 0x32291d00}, {0, 0x13bc5d00},
    {0, 0x5ef37400}, {0, 0xdd794000}, {0, 0x2e604300}, {0, 0xa4770b00}, {0, 0x84296200}, {0, 0xe65e2f00}, {0, 0xb0b90500}, {0, 0x0087f400},
    {0, 0xd6269f00}, {0, 0x8fcc9400}, {0, 0xf1282900}, {0, 0x4b652a00}, {0, 0x30103500}, {0, 0x86e80500}, {0, 0x8f14fc00}, {0, 0xde080700},
    {0, 0x7f853100}, {0, 0xe0b64d01}, {0, 0xf2eb4300}, {0, 0x739d6700}, {0, 0x5e210500}, {0, 0x59b98500}, {0, 0xa96e0200}, {0, 0xb8b31100},
    {0, 0xaede4300}, {0, 0x8fe56300}, {0, 0x21ec7101}, {0, 0xcf02df00}, {0, 0xf7cd0400}, {0, 0x6c767300}, {0, 0x448c0601}, {0, 0xa7afab00},
    {0, 0x20c01a00}, {0, 0x75b92c00}, {0, 0xd3a45f00}, {0, 0xbf961200}, {0, 0xa8b78502}, {0, 0x73eb1b00}, {0, 0x1ff56b00}, {0, 0xe1f77000},
    {0, 0x8b6a3500}, {0, 0x5f462800}, {0, 0x9d1e6a00}, {0, 0x090e3500}, {0, 0x843d0900}, {0, 0xe6b01800}, {0, 0xf4971100}, {0, 0x9fd30f00},
    {0, 0x18413a00}, {0, 0x44d42300}, {0, 0xe4a73f00}, {0, 0x5c04dc01}, {0, 0x1eddc800}, {0, 0xf8cc4c00}, {0, 0x3adc2b00}, {0, 0xcaa70b00},
    {0, 0x4a832800}, {0, 0x13069000}, {0, 0xeb542a00}, {0, 0x77f20d00}, {0, 0xe04e1400}, {0, 0x32681100}, {0, 0xaab35900}, {0, 0x14bfde00},
    {0, 0xc50e4002}, {0, 0x71aba300}, {0, 0x9fb86300}, {0, 0xed2caa00}, {0, 0x81162400}, {0, 0xea4d4e00}, {0, 0x036daa00}, {0, 0xcdd68600},
    {0, 0x92917e00}, {0, 0x30f02600}, {0, 0x2e7c5f00}, {0, 0xceb2bd00}, {0, 0x7e972300}, {0, 0xa6725901}, {0, 0x7bc78800}, {0, 0xfd040000},
    {0, 0x1dc46d00}, {0, 0xe0d15e00}, {0, 0x8b593900}, {0, 0x443d1c00}, {0, 0x97b62300}, {0, 0xf095c600}, {0, 0x82dcbb00}, {0, 0xd4042801},
    {0, 0xe6195600}, {0, 0x67499400}, {0, 0x0ea91401}, {0, 0x8a331800}, {0, 0x290b1e00}, {0, 0x39155c00}, {0, 0xc117dc00}, {0, 0x2aae0401},
    {0, 0x3a653c00}, {0, 0xa7110b02}, {0, 0x1e823600}, {0, 0xa7081800}, {0, 0x5996df00}, {0, 0x80112400}, {0, 0x94765400}, {0, 0x20d0c000},
    {0, 0x0fad0400}, {0, 0xad087200}, {0, 0xac374a00}, {0, 0x04bdbd00}, {0, 0xc5422a00}, {0, 0x93e43c00}, {0, 0x44390400}, {0, 0xb08c4200},
    {0, 0xe78ef400}, {0, 0x50a90800}, {0, 0x2e421000}, {0, 0xb1b03e00}, {0, 0x12d88901}, {0, 0x6d4f5a00}, {0, 0x15561c00}, {0, 0x87da8b00},
    {0, 0x5b559100}, {0, 0x72871e00}, {0, 0xd09a2000}, {0, 0x07e20b00}, {0, 0x62b02e00}, {0, 0x2cdb3100}, {0, 0x2bab2100}, {0, 0x98951100},
    {0, 0x52861000}, {0, 0x2aaf3600}, {0, 0x89b42201}, {0, 0xc3808500}, {0, 0x6361e900}, {0, 0x754c1300}, {0, 0x99920c00}, {0, 0xc7863200},
    {0, 0xed033f00}, {0, 0x86a90500}, {0, 0x31b7c601}, {0, 0xf6db3300}, {0, 0x67ae3700}, {0, 0x754d6600}, {0, 0xc4150c00}, {0, 0x2cfa6d00},
    {0, 0x66d4e700}, {0, 0x48603200}, {0, 0xae249700}, {0, 0xda0f1c01}, {0, 0x17408500}, {0, 0x341f0c00}, {0, 0xda033200}, {0, 0xa9ce1500},
    {0, 0xe0384700}, {0, 0xc72aa400}, {0, 0xe4493500}, {0, 0x07088000}, {0, 0xcfad3400}, {0, 0x319b0f00}, {0, 0xb0eb0200}, {0, 0x2e793600},
    {0, 0x8d71ad00}, {0, 0xa6705400}, {0, 0x29a79500}, {0, 0x76805300}, {0, 0xe11e1400}, {0, 0xe377f500}, {0, 0x26e5a401}, {0, 0x13403a00},
    {0, 0x55ec5c00}, {0, 0xdac34100}, {0, 0x9ee23c00}, {0, 0x5b4d4500}, {0, 0xf6410900}, {0, 0xb6121b00}, {0, 0xecf78400}, {0, 0xebad0601},
    {0, 0xc18e6601}, {0, 0x45771800}, {0, 0xf59b1700}, {0, 0xd23da700}, {0, 0x3e481200}, {0, 0x69675902}, {0, 0x2ff68c00}, {0, 0x0b884400},
    {0, 0x6adeab00}, {0, 0x43a70f00}, {0, 0xea8f3502}, {0, 0xaecf0400}, {0, 0x18f53100}, {0, 0x29dbdc00}, {0, 0x9d741d00}, {0, 0xf4e23600},
    {0, 0xb2a00900}, {0, 0x5bae8400}, {0, 0x8d8e5c00}, {0, 0xd1553400}, {0, 0x38495800}, {0, 0x840a1700}, {0, 0x8f7b1700}, {0, 0x83fa1b00},
    {0, 0x28c75200}, {0, 0x639a8300}, {0, 0x871d0c00}, {0, 0x7e5b7d00}, {0, 0xc8a00d00}, {0, 0xbaa50600}, {0, 0xd42c9200}, {0, 0x13524600},
    {0, 0x8b80de00}, {0, 0x47d71000}, {0, 0xa2437c00}, {0, 0x7ecc4f00}, {0, 0x07355d00}, {0, 0xe1d6da00}, {0, 0x118d0100}, {0, 0xd9d90001},
    {0, 0x1f8a9800}, {0, 0x5a853800}, {0, 0xbb758a00}, {0, 0x33c1b700}, {0, 0x1a2cda00}, {0, 0x3a3d3f00}, {0, 0x21962600}, {0, 0x17c93000},
    {0, 0xd0fe4400}, {0, 0xca695800}, {0, 0x84aa7600}, {0, 0x6c8dfc00}, {0, 0xfbf40b00}, {0, 0x426b6600}, {0, 0x26e50400}, {0, 0xb5a0ab00},
    {0, 0xedd09500}, {0, 0xdd260300}, {0, 0xabb6ed02}, {0, 0x69cea200}, {0, 0xd9ddee00}, {0, 0xfe732c01}, {0, 0x47f60e02}, {0, 0x72742400},
    {0, 0xd84d0600}, {0, 0xbb4b4100}, {0, 0x7b3bf100}, {0, 0x17e62501}, {0, 0xbc843900}, {0, 0x8f290102}, {0, 0x381a2300}, {0, 0x7f0f6d00},
    {0, 0x59c20a01}, {0, 0xade33000}, {0, 0x4d0e8101}, {0, 0x4595c300}, {0, 0x3f044000}, {0, 0xabcc5f00}, {0, 0xa3129401}, {0, 0x0a034000},
    {0, 0x0e213702}, {0, 0x088c4e01}, {0, 0x08e41d00}, {0, 0x19afc600}, {0, 0x38e37d00}, {0, 0xcb7d6700}, {0, 0x59841000}, {0, 0x7f5caa00},
    {0, 0x5a3b1d00}, {0, 0x3a375100}, {0, 0xdce92a00}, {0, 0x4e991700}, {0, 0x07efc400}, {0, 0xd70a4901}, {0, 0x76f5f900}, {0, 0xe4971900},
    {0, 0x7d210601}, {0, 0xf59e4400}, {0, 0xf6859800}, {0, 0x26c50500}, {0, 0x01a16200}, {0, 0xbd3a2100}, {0, 0xfe466a00}, {0, 0x56c3d500},
    {0, 0x8ba61100}, {0, 0x293f3300}, {0, 0xaffedd00}, {0, 0x842b6f00}, {0, 0x12d4ea00}, {0, 0xae8a1c00}, {0, 0x5df8d500}, {0, 0x1f150800},
    {0, 0xfbde3401}, {0, 0x4717bd01}, {0, 0x3a2c2501}, {0, 0x5aad2800}, {0, 0x47491800}, {0, 0xeaf34200}, {0, 0xd2bd7a00}, {0, 0x4e621000},
    {0, 0x6aad1700}, {0, 0x46023800}, {0, 0x4e298400}, {0, 0xcbd8fa01}, {0, 0x1548eb00}, {0, 0xae619000}, {0, 0xcaf2c400}, {0, 0x9abc4600},
    {0, 0x6e134100}, {0, 0x596b2d00}, {0, 0xf5802000}, {0, 0xf7f21e00}, {0, 0x5d164700}, {0, 0x4850e700}, {0, 0x2bef2500}, {0, 0x44931600},
    {0, 0xbef11500}, {0, 0x8e1fc601}, {0, 0xec32d501}, {0, 0x18100200}, {0, 0x964c5101}, {0, 0xff741c00}, {0, 0x1dccd900}, {0, 0x7d5cf400},
    {0, 0x08e05e00}, {0, 0x94be3f00}, {0, 0x72397600}, {0, 0x05b52600}, {0, 0x6b941800}, {0, 0xb5352a02}, {0, 0x4b271000}, {0, 0x73c1c700},
    {0, 0x3e600300}, {0, 0xf7743f00}, {0, 0xaea29601}, {0, 0xf96d9f00}, {0, 0x8d921500}, {0, 0x87224800}, {0, 0xc0ef6e01}, {0, 0xb8c29400},
    {0, 0x68768c00}, {0, 0x811e0800}, {0, 0x73310e00}, {0, 0x38816200}, {0, 0x00b32300}, {0, 0xe2537500}, {0, 0xd8631200}, {0, 0x39b9cf00},
    {0, 0x0c691002}, {0, 0x2c8e7900}, {0, 0x975c2a00}, {0, 0x66657200}, {0, 0xb0de7400}, {0, 0x7703f700}, {0, 0x6318e400}, {0, 0xc8293800},
    {0, 0x94182400}, {0, 0x38a8a000}, {0, 0x4f9d5900}, {0, 0x21992b00}, {0, 0x7e799600}, {0, 0x0748e700}, {0, 0xfe370a00}, {0, 0xc9827e00},
    {0, 0xc35c5200}, {0, 0x87b56600}, {0, 0xa6541b00}, {0, 0xc80f4b00}, {0, 0xd26af100}, {0, 0x91521a01}, {0, 0x92eb2f00}, {0, 0x28e6e500},
    {0, 0xbc876601}, {0, 0x32ab8200}, {0, 0xbd8c6100}, {0, 0x7506ad00}, {0, 0x9f2c2800}, {0, 0x7d16db00}, {0, 0x617cbf00}, {0, 0x952b6100},
    {0, 0xfa3ecf00}, {0, 0x70cd3000}, {0, 0x65a87200}, {0, 0x55226300}, {0, 0xa92d6800}, {0, 0xae702100}, {0, 0xec104600}, {0, 0xe498cb01},
    {0, 0xffea1200}, {0, 0x78b82a00}, {0, 0x43339200}, {0, 0x485e3100}, {0, 0xbc6e2100}, {0, 0x5b331b00}, {0, 0x0e1e1500}, {0, 0x8d72b000},
    {0, 0x7a591301}, {0, 0xbd824300}, {0, 0xd1e41000}, {0, 0xe2493401}, {0, 0x616c3900}, {0, 0xf623ea00}, {0, 0x31e64a00}, {0, 0x306c9001},
    {0, 0x40da5d00}, {0, 0xb2fc1400}, {0, 0xdd731b00}, {0, 0x19f6bd00}, {0, 0xf17e2600}, {0, 0xc7ed5000}, {0, 0x30968f00}, {0, 0xd66e8800},
    {0, 0x48f51d00}, {0, 0x40c16400}, {0, 0xc64d2200}, {0, 0x49ab2c01}, {0, 0x89606001}, {0, 0xd99e0b02}, {0, 0xfaa31701}, {0, 0x5cec6800},
    {0, 0x608f5d00}, {0, 0xde460400}, {0, 0x36124b00}, {0, 0x5d2d2e00}, {0, 0x70c90900}, {0, 0xf2363200}, {0, 0xec1a2800}, {0, 0x24d16100},
    {0, 0x4aa12d00}, {0, 0xd58c1401}, {0, 0x22608400}, {0, 0xff7f6100}, {0, 0xd60f2500}, {0, 0xc8af3100}, {0, 0x7ca83900}, {0, 0xd64de100},
    {0, 0xad882400}, {0, 0x3e6c0f00}, {0, 0x2e112d00}, {0, 0xeca34101}, {0, 0x1d8db700}, {0, 0x84465600}, {0, 0x746f0f00}, {0, 0x0f1f6200},
    {0, 0xe9358f00}, {0, 0x52112100}, {0, 0xb72c6400}, {0, 0x96090e00}, {0, 0x805c0100}, {0, 0xcd312d00}, {0, 0x19184e00}, {0, 0x981db700},
    {0, 0x2e1f2d01}, {0, 0xfa843100}, {0, 0x2fd06600}, {0, 0xe8679400}, {0, 0xb3a52000}, {0, 0xd9b7af01}, {0, 0x667a8700}, {0, 0xad9f3600},
    {0, 0x293a6500}, {0, 0x26f39d00}, {0, 0x89431700}, {0, 0x784b0f01}, {0, 0x585da700}, {0, 0xd7e73000}, {0, 0xa5052900}, {0, 0x81894700},
    {0, 0x60441000}, {0, 0xa18fe400}, {0, 0x01b82d00}, {0, 0x48ce1f00}, {0, 0x9b742c00}, {0, 0x6060ed00}, {0, 0x2ba32200}, {0, 0x8c663d00},
    {0, 0x87816800}, {0, 0x48140500}, {0, 0xf890b901}, {0, 0x79450900}, {0, 0x72086e00}, {0, 0xb750f400}, {0, 0x5e47a800}, {0, 0x616c6600},
    {0, 0x5a560d00}, {0, 0x0b487101}, {0, 0x7c9e1200}, {0, 0x424d2a00}, {0, 0xe0d88800}, {0, 0xb09d0000}, {0, 0xfd490500}, {0, 0x04ac3b00},
    {0, 0x859d0f00}, {0, 0x995d0f00}, {0, 0xf6ad3100}, {0, 0xf9c50500}, {0, 0x2b0d4601}, {0, 0xfa6e2f00}, {0, 0xe88a2c00}, {0, 0xed322f00},
    {0, 0xb02b0200}, {0, 0x76303800}, {0, 0x307f2a00}, {0, 0x16b04c00}, {0, 0x6d71cd00}, {0, 0xd23ec400}, {0, 0xf6544a00}, {0, 0x0d26d500},
    {0, 0xfc089c00}, {0, 0x3a103300}, {0, 0x3662f600}, {0, 0xa6e2a900}, {0, 0x2b240300}, {0, 0x64444300}, {0, 0x80312500}, {0, 0x0d642a00},
    {0, 0xd16b0a01}, {0, 0x544f6201}, {0, 0x87490100}, {0, 0xadede400}, {0, 0xfac7bb00}, {0, 0x3b192a00}, {0, 0xc4f52900}, {0, 0x22ea0100},
    {0, 0xdd601f00}, {0, 0x726dd200}, {0, 0xce8ac600}, {0, 0x351ab300}, {0, 0x2a1ad700}, {0, 0x6f170f00}, {0, 0xaefd2f00}, {0, 0x30e71201},
    {0, 0x59e33100}, {0, 0x8aee1800}, {0, 0x4f991000}, {0, 0xd2da7c00}, {0, 0x6ff63200}, {0, 0xcb28ed00}, {0, 0x77d68500}, {0, 0x3d605000},
    {0, 0x96eb5800}, {0, 0x8ea54b00}, {0, 0x708f8400}, {0, 0x1a360000}, {0, 0x45050300}, {0, 0x97b2e100}, {0, 0x1ead5600}, {0, 0xdbc40300},
    {0, 0xa7a56800}, {0, 0x5c8c4400}, {0, 0x2ce31900}, {0, 0x4c981700}, {0, 0x4ab1e400}, {0, 0xff135d00}, {0, 0x05823400}, {0, 0x8f0a7f01},
    {0, 0x5c785400}, {0, 0xc2996a00}, {0, 0xa3503f00}, {0, 0xa6626d01}, {0, 0xcfee5500}, {0, 0xbfd50a00}, {0, 0x5e4c4a00}, {0, 0x87986300},
    {0, 0x62b8a300}, {0, 0x84755600}, {0, 0xb7402101}, {0, 0x9b062600}, {0, 0xca3a1600}, {0, 0x7db34300}, {0, 0x69a81900}, {0, 0x3fa50b00},
    {0, 0x04b94c01}, {0, 0x6ac22301}, {0, 0xbcee0f00}, {0, 0x33a42800}, {0, 0xf4092200}, {0, 0x5e423100}, {0, 0xc94c4200}, {0, 0x92930500},
    {0, 0xe8e25700}, {0, 0xc88c2701}, {0, 0x59e67900}, {0, 0x4429a800}, {0, 0x7fba7c00}, {0, 0xed164b00}, {0, 0xe22d1e00}, {0, 0xde2f1900},
    {0, 0x640af300}, {0, 0xd4b09601}, {0, 0x01e17900}, {0, 0xbdd6c500}, {0, 0x647c2200}, {0, 0x9c2b1f00}, {0, 0x69024800}, {0, 0x580c8300},
    {0, 0x9eed3a00}, {0, 0xecc41800}, {0, 0x09005100}, {0, 0x441a2a00}, {0, 0xb07dc300}, {0, 0x9cf11e00}, {0, 0x2d640d00}, {0, 0x39e1b901},
    {0, 0x423f4000}, {0, 0xb558bf01}, {0, 0xb03c2600}, {0, 0x2fb30701}, {0, 0x79afc901}, {0, 0xb7012900}, {0, 0x1d63ba00}, {0, 0x8f911301},
    {0, 0x089c8100}, {0, 0xcab18000}, {0, 0x754e1201}, {0, 0xfddc1000}, {0, 0x7c6e5b01}, {0, 0x77616700}, {0, 0x343a8d00}, {0, 0x597b9c01},
    {0, 0x43185c00}, {0, 0x236e4600}, {0, 0x1e070f00}, {0, 0xd31e2d00}, {0, 0x20578f00}, {0, 0x23674f00}, {0, 0x14141500}, {0, 0x8ce20500},
    {0, 0x03521e00}, {0, 0x73a5c001}, {0, 0x2eeb7a00}, {0, 0x32822800}, {0, 0x29750100}, {0, 0x16f66e00}, {0, 0x3c9eca00}, {0, 0x76146d00},
    {0, 0x915fa300}, {0, 0xca78f500}, {0, 0x1ae4c900}, {0, 0xcc01ac00}, {0, 0x3c878e01}, {0, 0x1d196d00}, {0, 0x79033200}, {0, 0x45031200},
    {0, 0x4134c000}, {0, 0xd6c41800}, {0, 0x623d8002}, {0, 0xdb3f7300}, {0, 0xf07d3700}, {0, 0x5ab3b000}, {0, 0x4fa50201}, {0, 0xffe44000},
    {0, 0xd5f2f200}, {0, 0x6e69d401}, {0, 0x2b0f0001}, {0, 0x5aa32e00}, {0, 0x743f1900}, {0, 0xaa2ef400}, {0, 0x063d6701}, {0, 0x5c903100},
    {0, 0x63058000}, {0, 0xb8044600}, {0, 0x53f32300}, {0, 0x138e0c00}, {0, 0x9eb04700}, {0, 0x5fb07300}, {0, 0xdcb2b901}, {0, 0x52b27a00},
    {0, 0x7a7b0f01}, {0, 0x5843a100}, {0, 0x4f94c900}, {0, 0x826fce00}, {0, 0xe99b5e00}, {0, 0xd8d33c01}, {0, 0x42a29700}, {0, 0x3d63d900},
    {0, 0xc6226900}, {0, 0x57567b00}, {0, 0x157a1600}, {0, 0xf03b6300}, {0, 0xe0067400}, {0, 0xccb71c00}, {0, 0xcc842a00}, {0, 0xd07d3200},
    {0, 0x13fd0b00}, {0, 0x9c03fc00}, {0, 0xd8804401}, {0, 0xb26f4300}, {0, 0xb1ff1402}, {0, 0xb0e2fd00}, {0, 0x7d974800}, {0, 0x4a955f01},
    {0, 0xfe5c6200}, {0, 0x8a644000}, {0, 0x441ca500}, {0, 0x0b254700}, {0, 0x9f4a4c00}, {0, 0x30db1801}, {0, 0xfeba6c00}, {0, 0xb0373300},
    {0, 0xc14c0902}, {0, 0x54c00b00}, {0, 0x3df72d00}, {0, 0x14b36f01}, {0, 0x94191400}, {0, 0x2b7d7f00}, {0, 0xbb33a000}, {0, 0x31163700},
    {0, 0x3bd58402}, {0, 0xbf5d1700}, {0, 0x50760500}, {0, 0x11c0aa00}, {0, 0xd1908e00}, {0, 0xc3bbf000}, {0, 0xe2614900}, {0, 0xd04ea500},
    {0, 0x25273800}, {0, 0xd11f2f00}, {0, 0x8ed07200}, {0, 0xc9db9900}, {0, 0xa4c1a900}, {0, 0xe17c0400}, {0, 0xd0c12300}, {0, 0xc06d0900},
    {0, 0x8e373c01}, {0, 0x18fc7300}, {0, 0x40127400}, {0, 0xa529d300}, {0, 0x699f8800}, {0, 0x4a5da300}, {0, 0xa2051200}, {0, 0xbd0d9000},
    {0, 0xad680c00}, {0, 0xad1b8500}, {0, 0x95b82501}, {0, 0xc630b801}, {0, 0xf00a3b00}, {0, 0x37565900}, {0, 0xaef71a00}, {0, 0x72de2a00},
    {0, 0x23570b00}, {0, 0x0f01a900}, {0, 0x2fcda900}, {0, 0xf4952900}, {0, 0x55fc1300}, {0, 0x56e53b00}, {0, 0x6ce96800}, {0, 0x93d35500},
    {0, 0xe2b7c300}, {0, 0x99360200}, {0, 0xdd26a200}, {0, 0xd6173b01}, {0, 0xac34ed01}, {0, 0x2dda9000}, {0, 0x94801400}, {0, 0x68a13100},
    {0, 0x84111600}, {0, 0x32cc0800}, {0, 0x5ac55a00}, {0, 0x9fab2a01}, {0, 0xecab4b00}, {0, 0xada01800}, {0, 0xc83f6101}, {0, 0xbf7a1d00},
    {0, 0x41545d00}, {0, 0x399f5f00}, {0, 0xa5f02c00}, {0, 0x3f4f6d01}, {0, 0xf3a2ac00}, {0, 0xef504d00}, {0, 0x00818c00}, {0, 0xdec80500},
    {0, 0xe2510b00}, {0, 0x31fb3500}, {0, 0xb70c4b00}, {0, 0x34612601}, {0, 0x28682300}, {0, 0x7d820300}, {0, 0xb9043d00}, {0, 0x50085800},
    {0, 0xc4fc2501}, {0, 0x7efb0e00}, {0, 0x759e3300}, {0, 0xc1472800}, {0, 0x73645900}, {0, 0x79200700}, {0, 0x49521400}, {0, 0xfa269402},
    {0, 0x72f02400}, {0, 0x90e50400}, {0, 0x32ae7200}, {0, 0x7f2fc300}, {0, 0x8a8bca00}, {0, 0xd7cf2000}, {0, 0x73a82600}, {0, 0xccce8200},
    {0, 0xe8c8b800}, {0, 0x05681a00}, {0, 0x4a9a2401}, {0, 0x6f4f8500}, {0, 0xa0cb0900}, {0, 0x8cfc0e01}, {0, 0x46640900}, {0, 0x4a13af01},
    {0, 0x6bda8400}, {0, 0xcec88d00}, {0, 0x79f6f500}, {0, 0x29c2cc01}, {0, 0x2ef42500}, {0, 0x161f6400}, {0, 0x3f8a5e00}, {0, 0xba4d0f00},
    {0, 0x82ce1f00}, {0, 0xa2e90b01}, {0, 0x6ac90100}, {0, 0xdc243100}, {0, 0x96386500}, {0, 0x84a86b00}, {0, 0x9fa01901}, {0, 0x37298e00},
    {0, 0x8cf44500}, {0, 0xe70f0d00}, {0, 0x14d48e00}, {0, 0x3b803f00}, {0, 0x81393a01}, {0, 0xbfab5200}, {0, 0xa4642700}, {0, 0xf0bc0100},
    {0, 0x77754c01}, {0, 0x7ca50a00}, {0, 0x6dcf0100}, {0, 0x4a896501}, {0, 0x59163700}, {0, 0x8bcb7900}, {0, 0xbab9b701}, {0, 0x20008900},
    {0, 0x3473e300}, {0, 0x2e390500}, {0, 0x3a3b4000}, {0, 0x86baa400}, {0, 0x184c2602}, {0, 0x82405100}, {0, 0x1cc72500}, {0, 0xc4af3d00},
    {0, 0x6fdc0600}, {0, 0xf29e1600}, {0, 0xbc6a5c00}, {0, 0x03fa0401}, {0, 0xf86b1600}, {0, 0x5ea15c00}, {0, 0x5e402700}, {0, 0xdd885200},
    {0, 0x4f730000}, {0, 0x81e61b00}, {0, 0x8ff73c01}, {0, 0x1057ae00}, {0, 0x59293200}, {0, 0x94271800}, {0, 0xc4eb8d00}, {0, 0xb7ee9500},
    {0, 0x40a15800}, {0, 0xc53d3f00}, {0, 0xa4091400}, {0, 0xe9cf1900}, {0, 0x7df28100}, {0, 0x13cb1e00}, {0, 0x96053700}, {0, 0xbeb03500},
    {0, 0x45e82a00}, {0, 0x97e23f00}, {0, 0x38890d00}, {0, 0x3eba9f00}, {0, 0x7e256700}, {0, 0xb1db2e00}, {0, 0x282b7f00}, {0, 0xf7647401},
    {0, 0xa9ebac00}, {0, 0xf0371800}, {0, 0xbccab600}, {0, 0x9f3f3300}, {0, 0x7a090100}, {0, 0xb01c7800}, {0, 0xffeb6a00}, {0, 0x8c600900},
    {0, 0x4a080700}, {0, 0x9a422a00}, {0, 0xfd152b02}, {0, 0x99e6e401}, {0, 0xca5c4201}, {0, 0x9677e800}, {0, 0xc5b14e00}, {0, 0x87e80d00},
    {0, 0x76c20b00}, {0, 0x19d18300}, {0, 0xd0773900}, {0, 0x3d7b5b00}, {0, 0x30a9f000}, {0, 0xcf5e9400}, {0, 0xa6c8a600}, {0, 0xa80a2600},
    {0, 0x135faa00}, {0, 0x135f0700}, {0, 0xe0f20500}, {0, 0xd85e3d00}, {0, 0x39aca000}, {0, 0x9a3e0a00}, {0, 0x89229a00}, {0, 0x71239c01},
    {0, 0x48977c00}, {0, 0xac586100}, {0, 0xcc582600}, {0, 0x94402800}, {0, 0xe5b73000}, {0, 0xd2508b00}, {0, 0x8f980d00}, {0, 0xabac9a00},
    {0, 0xb5990600}, {0, 0x1e831d00}, {0, 0xbb295700}, {0, 0x01ab0c00}, {0, 0xd5073200}, {0, 0x40f02101}, {0, 0x80714600}, {0, 0xbcdd3a00},
    {0, 0x240c9d00}, {0, 0x8fbb1100}, {0, 0xd3c47300}, {0, 0xc5d03000}, {0, 0x67ff9000}, {0, 0x83904700}, {0, 0x29f01700}, {0, 0x487c5f00},
    {0, 0xd95e0900}, {0, 0x616e8a00}, {0, 0x08cd0c00}, {0, 0xaaa01500}, {0, 0xbe5c6f01}, {0, 0x82101900}, {0, 0x1c9c2800}, {0, 0x46e9bf00},
    {0, 0x9e339800}, {0, 0x50135301}, {0, 0x26842400}, {0, 0xfe53ed00}, {0, 0x859a0100}, {0, 0x6ce74000}, {0, 0x8ab06b00}, {0, 0xb80b0801},
    {0, 0xb1284d00}, {0, 0x2eba3b00}, {0, 0x91363a00}, {0, 0xaa5f3e00}, {0, 0x09078d00}, {0, 0x6da38b01}, {0, 0x4c42b500}, {0, 0xb5e79300},
    {0, 0x68270b00}, {0, 0xd177ee00}, {0, 0xe7a48400}, {0, 0x91565500}, {0, 0xa4a0d000}, {0, 0x71e60600}, {0, 0x47f3a500}, {0, 0xcdd3a000},
    {0, 0x6f6f1f00}, {0, 0xec662a00}, {0, 0xfcca4d00}, {0, 0x9734b300}, {0, 0x3dbd7300}, {0, 0xd5ca7f00}, {0, 0x311b0400}, {0, 0xa96e7700},
    {0, 0xe93ddc00}, {0, 0x8ca52900}, {0, 0x81262b00}, {0, 0x4a664400}, {0, 0x50d51400}, {0, 0x92234400}, {0, 0xcf3c1700}, {0, 0x3dff7500},
    {0, 0x11875f00}, {0, 0x99b08c00}, {0, 0xb36f1100}, {0, 0x26bdff00}, {0, 0x89b05c00}, {0, 0x4eb08501}, {0, 0x4c3ab000}, {0, 0xae334400},
    {0, 0x96da5c00}, {0, 0x10ab3d02}, {0, 0xe88ec100}, {0, 0xe8d15400}, {0, 0x965a3a00}, {0, 0x6bf34c00}, {0, 0xe78b2f00}, {0, 0x32864c00},
    {0, 0x52390100}, {0, 0x97a91a00}, {0, 0x60c2c200}, {0, 0x7ca22000}, {0, 0xf6913700}, {0, 0x15136200}, {0, 0x0f1f0300}, {0, 0xedda2600},
    {0, 0xc6f04202}, {0, 0x5107e900}, {0, 0xf738fd00}, {0, 0x4f3e3601}, {0, 0xade22900}, {0, 0x918d8f00}, {0, 0xca153000}, {0, 0xe0209500},
    {0, 0xae5ea700}, {0, 0x7c8cde00}, {0, 0xfd857601}, {0, 0x93596f00}, {0, 0x8cd61f00}, {0, 0x68646400}, {0, 0xfeaf7800}, {0, 0xdff84700},
    {0, 0xacc4c000}, {0, 0xf1b96000}, {0, 0x4ed66d00}, {0, 0xc9571300}, {0, 0x3a493d01}, {0, 0x53fda601}, {0, 0x96515e00}, {0, 0x2ca95e00},
    {0, 0xc6f94500}, {0, 0xca829200}, {0, 0x099b1900}, {0, 0x5b79af00}, {0, 0x471d8300}, {0, 0x7a8da100}, {0, 0xa2ce6700}, {0, 0x04c75d00},
    {0, 0x8ee09200}, {0, 0xbf60e500}, {0, 0xa3063800}, {0, 0x7ed44a00}, {0, 0x62311400}, {0, 0x66992301}, {0, 0x8f1d7101}, {0, 0x8f890d00},
    {0, 0xcddf6200}, {0, 0x0f7cb700}, {0, 0x38cd3f00}, {0, 0x14335b00}, {0, 0x1e6a0200}, {0, 0x8d391600}, {0, 0x3ddf0800}, {0, 0x3f446100},
    {0, 0x51192301}, {0, 0x7b018b01}, {0, 0x3e225800}, {0, 0x4184cc00}, {0, 0xcf376000}, {0, 0x48bed100}, {0, 0xfc464e01}, {0, 0xe4089900},
    {0, 0x898d2b00}, {0, 0x4eaa0c00}, {0, 0xb5c32900}, {0, 0x92f14d00}, {0, 0xc39c4800}, {0, 0x452c3e00}, {0, 0xffd0f200}, {0, 0x36641000},
    {0, 0x80fd2501}, {0, 0x1f4a0c00}, {0, 0x2c093102}, {0, 0x516bb600}, {0, 0x55d7b900}, {0, 0xaa2f7800}, {0, 0xecc95000}, {0, 0x163a5100},
    {0, 0x36e72d00}, {0, 0x24427500}, {0, 0xff0b2700}, {0, 0x5c8f8d00}, {0, 0x72c79d00}, {0, 0x49650000}, {0, 0x53411700}, {0, 0x719c0f00},
    {0, 0x30281100}, {0, 0xb2158c00}, {0, 0x69ec1200}, {0, 0x7cbb1000}, {0, 0xf8fd6700}, {0, 0x444e3b00}, {0, 0x9a227f00}, {0, 0x39dfa200},
    {0, 0x93fe0600}, {0, 0xbf307100}, {0, 0xb1b8dc01}, {0, 0x771e4e01}, {0, 0xcd7c2300}, {0, 0x71522100}, {0, 0xf0ec4200}, {0, 0xc6250500},
    {0, 0xbc88aa01}, {0, 0xa39d2500}, {0, 0xfc361002}, {0, 0x34f34600}, {0, 0x80780800}, {0, 0xb0c16300}, {0, 0xf6931c00}, {0, 0xdcd8d600},
    {0, 0xf73d6900}, {0, 0x0a45b100}, {0, 0xd00ae400}, {0, 0xcada4500}, {0, 0x2803e300}, {0, 0x02bfc100}, {0, 0xde409a00}, {0, 0x242b1e00},
    {0, 0x4be23100}, {0, 0x54156a00}, {0, 0x49eb2000}, {0, 0x96eb7900}, {0, 0xfe5c4e00}, {0, 0x85665200}, {0, 0x0bcc0b00}, {0, 0x3e390300},
    {0, 0x98fe1d00}, {0, 0x3ee05b00}, {0, 0x9a153800}, {0, 0x61b04500}, {0, 0x4dd22a00}, {0, 0x7d303900}, {0, 0xc0801700}, {0, 0xb6560d00},
    {0, 0xf2673b00}, {0, 0x58db0800}, {0, 0x5987e800}, {0, 0x10850100}, {0, 0xbb778d00}, {0, 0x30c51c00}, {0, 0xebac6b00}, {0, 0xc4715b00},
    {0, 0x870ec401}, {0, 0xe0502b00}, {0, 0x6813cb01}, {0, 0x0fb2e001}, {0, 0x36b41600}, {0, 0x29380900}, {0, 0x05d77701}, {0, 0x6c615301},
    {0, 0x8614ea00}, {0, 0x12f37800}, {0, 0x1baa2f00}, {0, 0x234cda00}, {0, 0x29a20201}, {0, 0xfb0a9902}, {0, 0xaf208600}, {0, 0x91352700},
    {0, 0x85b52500}, {0, 0x307ecc00}, {0, 0xdb042300}, {0, 0x1849ab00}, {0, 0xda655300}, {0, 0xe96a2300}, {0, 0x46c22800}, {0, 0xdc500a00},
    {0, 0x27c9b600}, {0, 0x574bb700}, {0, 0x68320b00}, {0, 0x11e69300}, {0, 0xb7a1d200}, {0, 0x1c3b8f00}, {0, 0x51fa0d00}, {0, 0x071e7301},
    {0, 0xa7cddb00}, {0, 0x39adf302}, {0, 0x66318e00}, {0, 0x193b2a00}, {0, 0x800e4900}, {0, 0xfd409d00}, {0, 0x99942f00}, {0, 0xfb037500},
    {0, 0xd7098000}, {0, 0xe3612e00}, {0, 0x64ac1201}, {0, 0xbf8f8b00}, {0, 0x83033a00}, {0, 0x4f0b8000}, {0, 0xd77b2100}, {0, 0xe7441f00},
    {0, 0xb9af2300}, {0, 0x2abc4c00}, {0, 0xfbb73b00}, {0, 0xa87f3800}, {0, 0xd78d3d00}, {0, 0x4214db00}, {0, 0xd2a50000}, {0, 0xa669b000},
    {0, 0x8f4a9b00}, {0, 0xdb816100}, {0, 0xa606cb01}, {0, 0xe7788600}, {0, 0xc6572f00}, {0, 0xdaaa1600}, {0, 0x2c84d100}, {0, 0xde7e3d00},
    {0, 0x58a11b00}, {0, 0xfd5b3800}, {0, 0x61232800}, {0, 0x37e31d01}, {0, 0xd6e36700}, {0, 0x89d52a00}, {0, 0x7cac3200}, {0, 0xf04f8c01},
    {0, 0xf3c43a00}, {0, 0x792dae00}, {0, 0x78863000}, {0, 0x0f441b00}, {0, 0xdb5c2c00}, {0, 0x37b43e00}, {0, 0xeceb0100}, {0, 0xc6406b00},
    {0, 0xccf86200}, {0, 0xfc72a901}, {0, 0x2808c500}, {0, 0x88ab4300}, {0, 0x14104e00}, {0, 0xff0e7b00}, {0, 0xa0fe2300}, {0, 0xdeb01900},
    {0, 0x6b97e000}, {0, 0xc3676f00}, {0, 0x4470c100}, {0, 0xfe2a1200}, {0, 0x7dcf3000}, {0, 0xf4433000}, {0, 0xbdd53100}, {0, 0x0f021d00},
    {0, 0x5c091600}, {0, 0x863b6600}, {0, 0x5efca400}, {0, 0xf7f81000}, {0, 0x85051b00}, {0, 0x9bc38800}, {0, 0x2f621700}, {0, 0xedd29d00},
    {0, 0x6a566e00}, {0, 0x96eb4901}, {0, 0x659d3f00}, {0, 0x7f6e3e00}, {0, 0xeba24400}, {0, 0x26ee1d00}, {0, 0xb4b04200}, {0, 0x94307401},
    {0, 0x8d160400}, {0, 0x1e1c2700}, {0, 0xb8243500}, {0, 0x6a3cb400}, {0, 0x444b1e00}, {0, 0x4a246f01}, {0, 0xe5232d00}, {0, 0x92a86200},
    {0, 0x39921600}, {0, 0x43e64600}, {0, 0x6ef94e00}, {0, 0xce37a500}, {0, 0xcb674400}, {0, 0xc1630601}, {0, 0xa317c100}, {0, 0x054f0700},
    {0, 0x714a0600}, {0, 0xa7761100}, {0, 0x28164e00}, {0, 0x40870a01}, {0, 0x7f453500}, {0, 0xe5381600}, {0, 0x4a267600}, {0, 0x446e2700},
    {0, 0xae2c1300}, {0, 0x32696000}, {0, 0xc0ee4a00}, {0, 0x15885c00}, {0, 0x77de0600}, {0, 0xb02a1e00}, {0, 0x9f3ba700}, {0, 0x7ae41700},
    {0, 0xe4ac4900}, {0, 0x2a1e3700}, {0, 0xbaffbc00}, {0, 0x04544800}, {0, 0xc14d8001}, {0, 0x568c8100}, {0, 0xbc705701}, {0, 0x7a007301},
    {0, 0x051a0300}, {0, 0x73622600}, {0, 0xe2c25b01}, {0, 0x3b2a0101}, {0, 0x6919f001}, {0, 0x50df7902}, {0, 0x1ce93200}, {0, 0xe9dca601},
    {0, 0x39033600}, {0, 0xbedd7d00}, {0, 0xb3885400}, {0, 0x65f9ba00}, {0, 0xd3312400}, {0, 0x0dc92900}, {0, 0xdf840400}, {0, 0x015ecf00},
    {0, 0x790e9c01}, {0, 0x9342c200}, {0, 0x18950c00}, {0, 0x0e6ec301}, {0, 0xe09da500}, {0, 0xd5c80200}, {0, 0x9cd11200}, {0, 0xb28e3c00},
    {0, 0xbd123100}, {0, 0x527ddf00}, {0, 0x12506f00}, {0, 0xb0c27c00}, {0, 0xa2a56801}, {0, 0x8d7eb200}, {0, 0xe1157000}, {0, 0xd56a1d00},
    {0, 0xd9720700}, {0, 0xd1214c00}, {0, 0x3bba0300}, {0, 0x54b11f00}, {0, 0xce2f3900}, {0, 0x0081f000}, {0, 0x33197600}, {0, 0x80f42300},
    {0, 0x51733100}, {0, 0xa710ac00}, {0, 0x1ab7be00}, {0, 0x6168b700}, {0, 0x71180800}, {0, 0x4c8bc801}, {0, 0x334c1600}, {0, 0x7bff3300},
    {0, 0x5b8d5600}, {0, 0xa6290600}, {0, 0xfc397b00}, {0, 0x95936900}, {0, 0xc9a13900}, {0, 0x331a3b00}, {0, 0x43817800}, {0, 0x3e756f00},
    {0, 0x4efa3300}, {0, 0x1ed23a00}, {0, 0xb1953d00}, {0, 0xb3082c00}, {0, 0x6b476700}, {0, 0x94f31501}, {0, 0xa9a22f00}, {0, 0x1a23b000},
    {0, 0x3d35b701}, {0, 0x594e5400}, {0, 0xd8b30500}, {0, 0x24c65e00}, {0, 0x2b4c3000}, {0, 0xb1cf3800}, {0, 0x913f0800}, {0, 0xa3199800},
    {0, 0xcafacf00}, {0, 0x94f02600}, {0, 0xe2918b01}, {0, 0x47c87600}, {0, 0xbc54c800}, {0, 0x0f6c5000}, {0, 0x8a1c4800}, {0, 0xc5d04a00},
    {0, 0xe0fe3201}, {0, 0xc2121b00}, {0, 0x4d5b2600}, {0, 0xfc8f5100}, {0, 0xa49e7600}, {0, 0xb3672800}, {0, 0xeef7ad00}, {0, 0x35962300},
    {0, 0x4df27300}, {0, 0xee7c2e00}, {0, 0x65937500}, {0, 0xf432c800}, {0, 0xf9e52900}, {0, 0xbed7bd00}, {0, 0x9b1ba801}, {0, 0x10894200},
    {0, 0x77695900}, {0, 0x279b7e00}, {0, 0x195bf500}, {0, 0xabb21a01}, {0, 0x128e0f00}, {0, 0x96ca0900}, {0, 0xfad2d400}, {0, 0xb9ba9200},
    {0, 0x1cde4200}, {0, 0x782b5f00}, {0, 0x41a19d00}, {0, 0x1690fe00}, {0, 0xab1d0a01}, {0, 0x0c8f1e00}, {0, 0x31b91100}, {0, 0x51ce2900},
    {0, 0x840c6001}, {0, 0x5b251900}, {0, 0x2b1f2e00}, {0, 0x3b086e00}, {0, 0x7f4e1800}, {0, 0xaa7fb400}, {0, 0x74e23700}, {0, 0x5c3f4800},
    {0, 0x67a47200}, {0, 0x79ca0600}, {0, 0x0ebc2300}, {0, 0x3d779700}, {0, 0x0d575300}, {0, 0xf3df7800}, {0, 0x21728b00}, {0, 0xd0663001},
    {0, 0xa19d3600}, {0, 0x842d4101}, {0, 0x0a121500}, {0, 0xbe163d00}, {0, 0xd25d1000}, {0, 0x2e142100}, {0, 0xff125200}, {0, 0xc6470100},
    {0, 0xf41a2300}, {0, 0xcfd24800}, {0, 0xcde40f00}, {0, 0x45024001}, {0, 0x0cba6600}, {0, 0xc9598e00}, {0, 0x96acde00}, {0, 0x1d8b0c00},
    {0, 0xb77ec900}, {0, 0x41c03a00}, {0, 0xbb6b6a02}, {0, 0x8ee90e01}, {0, 0x9d9c1b01}, {0, 0xbb9b0c00}, {0, 0xa1f53300}, {0, 0x5d302f00},
    {0, 0x67491600}, {0, 0xa90c2000}, {0, 0x7eefd800}, {0, 0x134d0400}, {0, 0x6e188a01}, {0, 0xdacb4d00}, {0, 0xab1f7600}, {0, 0xc03e1b00},
    {0, 0x684a2400}, {0, 0x93f41d00}, {0, 0x6ee92101}, {0, 0xafccb600}, {0, 0x66e67300}, {0, 0x706d5400}, {0, 0xf9d08500}, {0, 0xdb121c00},
    {0, 0xade82900}, {0, 0x1259e700}, {0, 0xce382400}, {0, 0x04ce2a00}, {0, 0x1d200501}, {0, 0x732a0300}, {0, 0xda613100}, {0, 0x2ffa1e00},
    {0, 0x1cf12b01}, {0, 0x3c667200}, {0, 0xfe4f0900}, {0, 0x18c7bd00}, {0, 0xc7b17c00}, {0, 0x0a930800}, {0, 0x1ec01c00}, {0, 0x16065001},
    {0, 0x43063f01}, {0, 0x66d72b00}, {0, 0x28ea5d01}, {0, 0xe0396600}, {0, 0x3a409500}, {0, 0xe3f30800}, {0, 0x30be3c00}, {0, 0x0b47ff00},
    {0, 0x18b80800}, {0, 0x7ffa2100}, {0, 0x4ff70800}, {0, 0x71a26600}, {0, 0x1f030600}, {0, 0xc6c48000}, {0, 0x4d50a701}, {0, 0xc8c7a900},
    {0, 0x65dd4b00}, {0, 0x60f32f00}, {0, 0x54ba1d00}, {0, 0xe589c900}, {0, 0x54c33b00}, {0, 0x39651200}, {0, 0xa47f5b00}, {0, 0x6ed71400},
    {0, 0xa8a80000}, {0, 0x57c34400}, {0, 0x092f1b00}, {0, 0x48773502}, {0, 0x3ca72700}, {0, 0x4dd04400}, {0, 0x58dc9a01}, {0, 0x1ded1400},
    {0, 0xa4a94f01}, {0, 0xe4941000}, {0, 0xe4d91700}, {0, 0x85c20500}, {0, 0x4d341a00}, {0, 0x3dc72202}, {0, 0x6add2300}, {0, 0x4c1b0e00},
    {0, 0xbbce4a00}, {0, 0x58362100}, {0, 0x4f3eba00}, {0, 0x73a73d00}, {0, 0x2e561300}, {0, 0x4b583a00}, {0, 0xc7714c00}, {0, 0xdab21300},
    {0, 0xd3e42900}, {0, 0x62329400}, {0, 0xfd598400}, {0, 0xb70a9000}, {0, 0xb9bab800}, {0, 0xef680100}, {0, 0x9acd7200}, {0, 0xa00f1800},
    {0, 0x4dd16d00}, {0, 0x6d114a00}, {0, 0x03de6c00}, {0, 0xc9764e01}, {0, 0x4812ab00}, {0, 0x4fa93700}, {0, 0xfe1cd800}, {0, 0x80512600},
    {0, 0xffc7a500}, {0, 0x55ce8900}, {0, 0xdd93f100}, {0, 0xb4d67700}, {0, 0xf9117c00}, {0, 0x6e964700}, {0, 0xf01c7000}, {0, 0xd5441d00},
    {0, 0x5d887600}, {0, 0x91321f02}, {0, 0xe39a5900}, {0, 0x883c3700}, {0, 0x3f1f5400}, {0, 0xfca83900}, {0, 0x6d5e8a01}, {0, 0xfedf6101},
    {0, 0x71a34100}, {0, 0x5d176800}, {0, 0x713a4a00}, {0, 0x01d01b00}, {0, 0x442d3d00}, {0, 0x704e5a00}, {0, 0xf0d74700}, {0, 0x21db0001},
    {0, 0xe52b0800}, {0, 0xe7dd6000}, {0, 0xe44a0000}, {0, 0xbe980e00}, {0, 0x3d586900}, {0, 0xbca12b00}, {0, 0x63692b00}, {0, 0x3d2d4100},
    {0, 0x330b5500}, {0, 0xa448d600}, {0, 0x6333ee00}, {0, 0x259b9401}, {0, 0x970b0600}, {0, 0xd5357200}, {0, 0xe67c0600}, {0, 0x0c250f00},
    {0, 0x468bb500}, {0, 0x46536b01}, {0, 0xd6ce3501}, {0, 0x56072300}, {0, 0x56dccb00}, {0, 0x0baf1b00}, {0, 0xf58ec300}, {0, 0xa60f0d00},
    {0, 0x1f076300}, {0, 0x8ccd0d00}, {0, 0x7367f500}, {0, 0xce5d0000}, {0, 0x3c3bf200}, {0, 0xae353200}, {0, 0x0ead7b00}, {0, 0xa1b08500},
    {0, 0xc8581300}, {0, 0xc35bb300}, {0, 0xdfe65700}, {0, 0x65032e00}, {0, 0xd98b5c00}, {0, 0xcee82500}, {0, 0x17360901}, {0, 0xac7ee300},
    {0, 0x4c4cba00}, {0, 0xcbf24400}, {0, 0x64a00400}, {0, 0xab503700}, {0, 0xd39a0d00}, {0, 0x23a30d00}, {0, 0x9ae7c700}, {0, 0xfc0e3100},
    {0, 0x6c7f7600}, {0, 0x9dd30300}, {0, 0xf7958500}, {0, 0x5c91a000}, {0, 0xc0f92200}, {0, 0x4b463500}, {0, 0x7c018000}, {0, 0x74a82300},
    {0, 0x45392700}, {0, 0xe1ae7a00}, {0, 0x5f850500}, {0, 0xf23bdf00}, {0, 0xbe6a0300}, {0, 0xfc980d00}, {0, 0x177a4e00}, {0, 0x9d53a700},
    {0, 0x30cdee00}, {0, 0xc5851801}, {0, 0xa1540902}, {0, 0x585c4e01}, {0, 0x82d89f00}, {0, 0x98bc5b00}, {0, 0xce6f1a00}, {0, 0x27395d00},
    {0, 0xeef08b00}, {0, 0x94f53502}, {0, 0x8ce60100}, {0, 0x9ff20800}, {0, 0x65967900}, {0, 0x4f133d00}, {0, 0x0fc08e00}, {0, 0x64272900},
    {0, 0xb7878200}, {0, 0x116e0100}, {0, 0xf6471000}, {0, 0xc5ea5e00}, {0, 0x90d61100}, {0, 0xef2e3600}, {0, 0x0b4c0300}, {0, 0x74ec6600},
    {0, 0x886a0c00}, {0, 0x7df81d00}, {0, 0xbf609000}, {0, 0xb2b20400}, {0, 0x621d6800}, {0, 0x65953700}, {0, 0x87deca00}, {0, 0xe7720e00},
    {0, 0x3d2b7b00}, {0, 0x73f84800}, {0, 0xf4875600}, {0, 0x21196600}, {0, 0xb46da900}, {0, 0xa5671700}, {0, 0x12db3100}, {0, 0x73749000},
    {0, 0x07f00700}, {0, 0xb9ef0600}, {0, 0x2725a100}, {0, 0xa4ebdb00}, {0, 0xc4308d00}, {0, 0x74bdfb00}, {0, 0x73397a00}, {0, 0xdcdc7f00},
    {0, 0x25f27500}, {0, 0x68cffc01}, {0, 0x3f780000}, {0, 0x02214200}, {0, 0x4eb78900}, {0, 0xe6ff0200}, {0, 0xa2689900}, {0, 0x66150c00},
    {0, 0xf65b6e00}, {0, 0xa9883900}, {0, 0xb4de7700}, {0, 0x0e4b8601}, {0, 0x39b80e00}, {0, 0xae9aa500}, {0, 0xed7d3600}, {0, 0x53ca6100},
    {0, 0x22986400}, {0, 0xa7b97100}, {0, 0xdf075400}, {0, 0x1ebe9300}, {0, 0xfe40c400}, {0, 0xf2004b00}, {0, 0x5e120d00}, {0, 0xf3d73f01},
    {0, 0x55917300}, {0, 0xbe477400}, {0, 0xd7152800}, {0, 0x7b917000}, {0, 0x4b899300}, {0, 0xae875500}, {0, 0x99b08d00}, {0, 0xdba70300},
    {0, 0x86781100}, {0, 0x3a76b500}, {0, 0x01bf0d00}, {0, 0xea5c2200}, {0, 0x5864a800}, {0, 0x1e1b2d00}, {0, 0x24da0d00}, {0, 0x32804f00},
    {0, 0xdbb8b500}, {0, 0x1f497800}, {0, 0x31bc4e00}, {0, 0xe0d84600}, {0, 0xfb964501}, {0, 0x0b5b3900}, {0, 0x2fea6400}, {0, 0x78d6a200},
    {0, 0xcbf6e800}, {0, 0x2662df01}, {0, 0x59bf2301}, {0, 0x22b04000}, {0, 0xaad61400}, {0, 0x709b7200}, {0, 0x60ebec00}, {0, 0xc31e7900},
    {0, 0x6bedaa00}, {0, 0x424a8c00}, {0, 0x7f6ec700}, {0, 0xf2686400}, {0, 0x81063900}, {0, 0x26b64800}, {0, 0xaf6a1200}, {0, 0x80299700},
    {0, 0xcf4a5c00}, {0, 0xbf9fa300}, {0, 0xa943f500}, {0, 0x60507e00}, {0, 0xad805c00}, {0, 0x1bb22f00}, {0, 0xe1b27000}, {0, 0x5a20d600},
    {0, 0xb9847400}, {0, 0xd73b8100}, {0, 0x84f66d00}, {0, 0x38c97300}, {0, 0x76dc1100}, {0, 0xf1ef9700}, {0, 0xd8c30200}, {0, 0x9aebc501},
    {0, 0x9a052c00}, {0, 0xe8207200}, {0, 0x398e1400}, {0, 0xc7672a00}, {0, 0xf2894d00}, {0, 0xd5d1bd00}, {0, 0x0aad3600}, {0, 0x98c10000},
    {0, 0xbe250100}, {0, 0x7b3d0402}, {0, 0x2a5b2d00}, {0, 0x0c185900}, {0, 0x9b474601}, {0, 0xe3160e00}, {0, 0xc26d2301}, {0, 0xde9c6900},
    {0, 0xab8ea500}, {0, 0xf76a1500}, {0, 0x3b32c500}, {0, 0x60544d00}, {0, 0x1afa6300}, {0, 0xdf1a8600}, {0, 0x36f4e102}, {0, 0xee4ffc00},
    {0, 0x79e1b400}, {0, 0x15154101}, {0, 0xfa520000}, {0, 0xbcc31b00}, {0, 0xa0c92300}, {0, 0x24df3e01}, {0, 0x651a8e00}, {0, 0x3f553400},
    {0, 0x9ef49d01}, {0, 0xb47d2600}, {0, 0x8ab30200}, {0, 0x39553500}, {0, 0xdadf7c00}, {0, 0xad702e00}, {0, 0x6cf53100}, {0, 0xe8fa0100},
    {0, 0x42c50900}, {0, 0xde4e3600}, {0, 0x89845800}, {0, 0x41245f00}, {0, 0xefe5eb00}, {0, 0xd9a92000}, {0, 0x7fae9300}, {0, 0x00ef3000},
    {0, 0xd6ef5300}, {0, 0x4c5f2100}, {0, 0x73d21d01}, {0, 0x245a6a00}, {0, 0xb4b74100}, {0, 0xd0455600}, {0, 0x1f477500}, {0, 0x252d6700},
    {0, 0xfed0f101}, {0, 0xf3967100}, {0, 0x254c4b01}, {0, 0x17e34e00}, {0, 0x7a398f00}, {0, 0xd7183100}, {0, 0x223f0400}, {0, 0x4f317c00},
    {0, 0xb39d4c00}, {0, 0xe0cd7500}, {0, 0x84276f01}, {0, 0xef281300}, {0, 0x4bb30e00}, {0, 0x136b6100}, {0, 0x39553b00}, {0, 0x24f55000},
    {0, 0xb3fbd000}, {0, 0x32b26c00}, {0, 0xc0912700}, {0, 0xc6b38900}, {0, 0x98184c00}, {0, 0x5bee0c00}, {0, 0x8e681600}, {0, 0xee676400},
    {0, 0x2d9f8e00}, {0, 0x2c1c1500}, {0, 0xe2077800}, {0, 0xa793ae00}, {0, 0x6be75200}, {0, 0xb7a90200}, {0, 0x25ae9d00}, {0, 0xae475700},
    {0, 0x694e7600}, {0, 0x75d32700}, {0, 0x06ab6c00}, {0, 0x58c04e00}, {0, 0x07ca7800}, {0, 0x71a84500}, {0, 0x53904c00}, {0, 0x3c078f01},
    {0, 0xe2ba6e00}, {0, 0xca899200}, {0, 0xc28d4200}, {0, 0x9f680e00}, {0, 0x7f4b9a00}, {0, 0x10305100}, {0, 0x1b72af01}, {0, 0xcd255100},
    {0, 0xd2971000}, {0, 0x621fad00}, {0, 0x50ed3c00}, {0, 0x31f8a900}, {0, 0xfbbd0100}, {0, 0x296b7200}, {0, 0x7a8a5300}, {0, 0x67247400},
    {0, 0x99782c00}, {0, 0x92093500}, {0, 0xd15c1200}, {0, 0x97c40701}, {0, 0x55096b00}, {0, 0xada61700}, {0, 0x32578200}, {0, 0x966ca200},
    {0, 0x589ab500}, {0, 0x5e171601}, {0, 0xd85fd402}, {0, 0xd4460700}, {0, 0x2e49aa00}, {0, 0xdeb8b800}, {0, 0x0d610a01}, {0, 0x0bbe6700},
    {0, 0xfc0fcd00}, {0, 0xa2870f00}, {0, 0x4f0d5d00}, {0, 0x4fb21f00}, {0, 0xbfd63001}, {0, 0xdcae2500}, {0, 0x17f77000}, {0, 0x816d2100},
    {0, 0xbdc03a00}, {0, 0x00946e00}, {0, 0xd4eb7d00}, {0, 0xec1bc200}, {0, 0xa2279800}, {0, 0x67670000}, {0, 0xb3630900}, {0, 0xeae03300},
    {0, 0x3e7f1800}, {0, 0xca392f01}, {0, 0x861fb401}, {0, 0x8a650d00}, {0, 0xcf175400}, {0, 0x5fcef600}, {0, 0xc3f80600}, {0, 0x31300400},
    {0, 0x1bb74100}, {0, 0x60a8a800}, {0, 0x95e83200}, {0, 0x356ed300}, {0, 0xf8bf5800}, {0, 0x75814700}, {0, 0xb09c3600}, {0, 0x3f8c0a00},
    {0, 0xf044c400}, {0, 0xa89dc200}, {0, 0x13450700}, {0, 0x83e20900}, {0, 0xe0257d00}, {0, 0xc4226200}, {0, 0x91810200}, {0, 0x21fff400},
    {0, 0x2ccd7800}, {0, 0x13c3d200}, {0, 0x2f41d200}, {0, 0xe3700900}, {0, 0xfe7bf700}, {0, 0x5b6b2100}, {0, 0x0df21700}, {0, 0x5f51db00},
    {0, 0xbb6b2300}, {0, 0x9142e900}, {0, 0x3b3e3000}, {0, 0xae411100}, {0, 0xccab9600}, {0, 0xf1c87800}, {0, 0x3a3cfb01}, {0, 0x61863701},
    {0, 0xb102e000}, {0, 0x214e2600}, {0, 0x0104f200}, {0, 0x334a3000}, {0, 0x5f091d00}, {0, 0x9496c001}, {0, 0xece44d00}, {0, 0xec247c00},
    {0, 0x1be64b00}, {0, 0xf74ea700}, {0, 0x39d0db00}, {0, 0x59400600}, {0, 0xcffa7200}, {0, 0xb7a10200}, {0, 0x80290d01}, {0, 0xe65f3500},
    {0, 0xceef0c00}, {0, 0x4331fd00}, {0, 0x56816200}, {0, 0xcc882f00}, {0, 0xc5f37400}, {0, 0x36844100}, {0, 0x8e722600}, {0, 0xaa3f1500},
    {0, 0x7d023000}, {0, 0x5e5e4400}, {0, 0x8dc23b00}, {0, 0x02121400}, {0, 0x5ee84300}, {0, 0x1622cf00}, {0, 0x05643900}, {0, 0x1305b000},
    {0, 0x1c0b6e00}, {0, 0x72065b00}, {0, 0x08c33500}, {0, 0xe7db0200}, {0, 0xd6677e00}, {0, 0xf0483f00}, {0, 0x2c2e4301}, {0, 0xaf1b1600},
    {0, 0x10c8bd00}, {0, 0x9fec6000}, {0, 0xe6ea2700}, {0, 0xd95dd401}, {0, 0x4e492700}, {0, 0x1a4d2b00}, {0, 0x999c0800}, {0, 0x3ed92800},
    {0, 0x2b072200}, {0, 0xba1a4b01}, {0, 0x38b21401}, {0, 0x04973a00}, {0, 0x718d2300}, {0, 0x10f80b00}, {0, 0x4432e400}, {0, 0xed460700},
    {0, 0x38aa0e00}, {0, 0x00b78200}, {0, 0x43a70600}, {0, 0x5b6ea400}, {0, 0x12bd2f02}, {0, 0xc25c1200}, {0, 0x3dc53800}, {0, 0xc48f4f00},
    {0, 0x1f065a00}, {0, 0xf0f5c600}, {0, 0xeaf8f400}, {0, 0x88fe4301}, {0, 0x5ed82100}, {0, 0x2bde7100}, {0, 0xc3070f01}, {0, 0xc3c32200},
    {0, 0x891e6f00}, {0, 0x0acb1c00}, {0, 0x8c07c400}, {0, 0x388f4100}, {0, 0xb6533200}, {0, 0x5d1ab900}, {0, 0xc9a7db00}, {0, 0xe3e09a00},
    {0, 0xd4ec5700}, {0, 0xaf6f0a01}, {0, 0xa55a8a00}, {0, 0x56ac4d00}, {0, 0x1cae2900}, {0, 0xdf236901}, {0, 0x8bc98100}, {0, 0x563edf00},
    {0, 0x9cd94300}, {0, 0x7aef2701}, {0, 0xfadc1e00}, {0, 0xde4c1f00}, {0, 0x651b1d00}, {0, 0x157e4000}, {0, 0xc0b91700}, {0, 0x89873200},
    {0, 0x578b1400}, {0, 0x415b6a00}, {0, 0xdff28600}, {0, 0x88a63600}, {0, 0x99015000}, {0, 0xe1c62600}, {0, 0x14f74a00}, {0, 0x4eec1400},
    {0, 0x11564000}, {0, 0x92624f00}, {0, 0x29950e00}, {0, 0xf5d07800}, {0, 0xa6f64a01}, {0, 0xd2533f00}, {0, 0x58bb4d00}, {0, 0x10f26a00},
    {0, 0x87203200}, {0, 0x0aeaf301}, {0, 0x93a17c00}, {0, 0x784b3200}, {0, 0xb5e12d00}, {0, 0x584a8f00}, {0, 0x7ef85300}, {0, 0xdd2fbb00},
    {0, 0x09dfd200}, {0, 0x62ef2000}, {0, 0x6207a800}, {0, 0xaa7e7700}, {0, 0x02c8ab00}, {0, 0x9ec83201}, {0, 0x14f50200}, {0, 0x32c80400},
    {0, 0x28616600}, {0, 0x20df0100}, {0, 0x18ff8300}, {0, 0x1243a700}, {0, 0x27184400}, {0, 0xdbee1100}, {0, 0x10d4c601}, {0, 0xdc211600},
    {0, 0x7add9b02}, {0, 0xbf9de801}, {0, 0x134c5500}, {0, 0xa6f62800}, {0, 0x2d016701}, {0, 0x982f4d00}, {0, 0x96d91f00}, {0, 0x8c263d01},
    {0, 0x54522c00}, {0, 0x9763e400}, {0, 0x8ae03e00}, {0, 0x8c678b00}, {0, 0x73a0ad01}, {0, 0xf3ea5a00}, {0, 0xa54e0a00}, {0, 0x1a852300},
    {0, 0xb7273e01}, {0, 0x9603f300}, {0, 0xe2e85e00}, {0, 0x65561700}, {0, 0xb1ae6500}, {0, 0x0db74100}, {0, 0x14f77500}, {0, 0x2e301d01},
    {0, 0x39d4ea00}, {0, 0x37f5a100}, {0, 0x29561200}, {0, 0xd7791400}, {0, 0xa7663200}, {0, 0x34569c00}, {0, 0x69da6400}, {0, 0x7a190200},
    {0, 0x2df86e00}, {0, 0x1d423c00}, {0, 0x07d92000}, {0, 0xb9694200}, {0, 0x9ebc0000}, {0, 0x79f27100}, {0, 0x08d4b500}, {0, 0x01df5d00},
    {0, 0x99874100}, {0, 0x52bd5c00}, {0, 0xa56b4f00}, {0, 0x6d332c00}, {0, 0xd5651200}, {0, 0x3112f200}, {0, 0xdb035200}, {0, 0x760b2000},
    {0, 0x7306e200}, {0, 0xee6fc900}, {0, 0xa8035001}, {0, 0x93840b00}, {0, 0x32e43300}, {0, 0x94b11100}, {0, 0xa18f7700}, {0, 0xce040e01},
    {0, 0xa684a400}, {0, 0x4c81d100}, {0, 0xfc2f2600}, {0, 0x1f5b3d01}, {0, 0xdc590900}, {0, 0xfe6b7300}, {0, 0xb8c44b01}, {0, 0x79478601},
    {0, 0xf2ddbf00}, {0, 0x2a475700}, {0, 0x8f533100}, {0, 0xb6b0fa05}, {0, 0x5e420801}, {0, 0x57984000}, {0, 0xe61cff00}, {0, 0x31734800},
    {0, 0xd56d1300}, {0, 0x92f01700}, {0, 0x49784700}, {0, 0xa1d58002}, {0, 0xae8b6800}, {0, 0x446a3700}, {0, 0xfd091600}, {0, 0xab598800},
    {0, 0xe2657000}, {0, 0x70518700}, {0, 0x08a79e00}, {0, 0x5f105700}, {0, 0xcb8b1800}, {0, 0x02062c00}, {0, 0x87f84200}, {0, 0x2cfb8700},
    {0, 0x120f0200}, {0, 0xdeec2100}, {0, 0x35554600}, {0, 0x82734d00}, {0, 0x02c26900}, {0, 0xf8a21400}, {0, 0x64591500}, {0, 0x1ce34000},
    {0, 0xe0333a00}, {0, 0x2a971e00}, {0, 0x5e8f6000}, {0, 0x32155600}, {0, 0xc90d1d00}, {0, 0xba64b700}, {0, 0xbf18ec00}, {0, 0x21ff2e00},
    {0, 0x846cda00}, {0, 0xfa680d01}, {0, 0x10943c00}, {0, 0xcbc61c00}, {0, 0x94420f01}, {0, 0x3b743a01}, {0, 0x938c6f00}, {0, 0x113abd00},
    {0, 0x7d6a0e00}, {0, 0x4ebd5700}, {0, 0x6002a400}, {0, 0x9d818e00}, {0, 0x4b511700}, {0, 0x883ea700}, {0, 0x10736600}, {0, 0x4a1f2c00},
    {0, 0x0e729800}, {0, 0xc78a3200}, {0, 0xfc72a900}, {0, 0xeef4b200}, {0, 0x2da00d00}, {0, 0xa2ee0a00}, {0, 0xf4751900}, {0, 0x915d0200},
    {0, 0x65602601}, {0, 0x9dbd2e00}, {0, 0x2cf83a00}, {0, 0xd08c1f00}, {0, 0x35bc2000}, {0, 0x63cb1e00}, {0, 0xc5de8e00}, {0, 0x4321bb00},
    {0, 0xa9bca500}, {0, 0x4e6d2700}, {0, 0x920b4c00}, {0, 0x3546c300}, {0, 0x8e885e00}, {0, 0xdcf90c00}, {0, 0x4f820d00}, {0, 0x3e9fcd00},
    {0, 0xbb97e900}, {0, 0x71f96100}, {0, 0xb762a002}, {0, 0x5a092600}, {0, 0xeccc8700}, {0, 0x5fa65300}, {0, 0xe0cc2a01}, {0, 0x7f466700},
    {0, 0xe3ac9e00}, {0, 0xce95c500}, {0, 0x11fa2d00}, {0, 0x936e4a00}, {0, 0x5d411f01}, {0, 0xf4a18800}, {0, 0xf33b1700}, {0, 0xb87e6800},
    {0, 0x9ddc4600}, {0, 0x5fc59700}, {0, 0x1086ab00}, {0, 0xa9418600}, {0, 0x597f2000}, {0, 0x05120800}, {0, 0x6ec63700}, {0, 0xb0a90200},
    {0, 0x3af65400}, {0, 0x79ff8100}, {0, 0xa4e5b200}, {0, 0xc8538b00}, {0, 0x9d272400}, {0, 0x17e01400}, {0, 0x29d65000}, {0, 0xd05c0600},
    {0, 0xf17a9300}, {0, 0x8ac75e00}, {0, 0x563d5301}, {0, 0xf2bb8100}, {0, 0x495c8b00}, {0, 0x21803b00}, {0, 0xc3dd2400}, {0, 0xa6079e00},
    {0, 0x40d4af00}, {0, 0x06ae5d00}, {0, 0x2f4e3f00}, {0, 0x4aa7b800}, {0, 0x35081900}, {0, 0x86eeae01}, {0, 0xbb910d00}, {0, 0x1bf5fb00},
    {0, 0xbfc08c00}, {0, 0xcff10d00}, {0, 0xe0a20501}, {0, 0x272d2c00}, {0, 0xa76af600}, {0, 0xdb3d8000}, {0, 0xcd020800}, {0, 0xb2d00700},
    {0, 0x3bbc1b00}, {0, 0x70d7f400}, {0, 0x67fa0b00}, {0, 0xbb831200}, {0, 0x80ce0100}, {0, 0x7c11d100}, {0, 0xe20f4100}, {0, 0xcbb80a00},
    {0, 0x3d66f900}, {0, 0x0d9f1100}, {0, 0x3790ea00}, {0, 0x6e350800}, {0, 0xac612e00}, {0, 0x47695700}, {0, 0x10dbae00}, {0, 0x87a36900},
    {0, 0x789b2e01}, {0, 0xf50a0300}, {0, 0x0e88f800}, {0, 0x45115800}, {0, 0x05ff5600}, {0, 0x5f458500}, {0, 0x54b00600}, {0, 0xd18f5000},
    {0, 0x11421600}, {0, 0x963a6000}, {0, 0x0fc3c600}, {0, 0x52114101}, {0, 0x62d5fe00}, {0, 0x39961200}, {0, 0x600f5100}, {0, 0x28df2a00},
    {0, 0x73d7a800}, {0, 0x28501f01}, {0, 0x8d0d2300}, {0, 0xff743b00}, {0, 0x887d3100}, {0, 0xf9511800}, {0, 0xdf4c4700}, {0, 0x085a4e00},
    {0, 0xba520c00}, {0, 0xb2f06800}, {0, 0x570a0000}, {0, 0xc7cd1c00}, {0, 0xfbefb600}, {0, 0x21643c00}, {0, 0x443e3200}, {0, 0x4450be00},
    {0, 0xb2014600}, {0, 0xbb112500}, {0, 0xf4347100}, {0, 0x6b853e00}, {0, 0x4a380c00}, {0, 0xec9c4100}, {0, 0x91c55a00}, {0, 0x79057400},
    {0, 0x6f346000}, {0, 0x4fde0f00}, {0, 0x73068f00}, {0, 0x8e3b4000}, {0, 0xf5da0e00}, {0, 0x28ea3800}, {0, 0x9538f200}, {0, 0xb595b600},
    {0, 0x38bc9900}, {0, 0xe5a6b001}, {0, 0x252f2500}, {0, 0xe3d55a00}, {0, 0xb8e1cf00}, {0, 0x1e827c00}, {0, 0x976faa00}, {0, 0x4d892d00},
    {0, 0xc19a1801}, {0, 0x2f2d4e00}, {0, 0x34763000}, {0, 0x9d4bfd01}, {0, 0xd19a3900}, {0, 0xedb6cb00}, {0, 0x679b1900}, {0, 0x5acb1900},
    {0, 0xa7908000}, {0, 0x49a0d200}, {0, 0x5e20c100}, {0, 0x08160900}, {0, 0x429f1800}, {0, 0xfbf81d00}, {0, 0xc1736c00}, {0, 0x07577200},
    {0, 0xacd38e00}, {0, 0xf5404001}, {0, 0x45a63100}, {0, 0x1b420101}, {0, 0xd6c18300}, {0, 0x8d32cb00}, {0, 0xcf1e2b00}, {0, 0x41edb600},
    {0, 0x98777000}, {0, 0xa713ac00}, {0, 0xb9971500}, {0, 0x6ae82d00}, {0, 0xd2bd2000}, {0, 0x53bf0700}, {0, 0xe4eeb200}, {0, 0x71ccae00},
    {0, 0xab063601}, {0, 0x81927d00}, {0, 0xa7b85000}, {0, 0xf5617600}, {0, 0x0b1c2200}, {0, 0x82d9b800}, {0, 0xb3688600}, {0, 0xb92aea00},
    {0, 0xef7b2701}, {0, 0x0e5e4a00}, {0, 0xc6cec001}, {0, 0x7c512100}, {0, 0xb00e0600}, {0, 0x2c1a8b00}, {0, 0xcde1b200}, {0, 0x6a357f00},
    {0, 0xf1152e00}, {0, 0x96391502}, {0, 0xcd333b00}, {0, 0x9343d800}, {0, 0xc2881700}, {0, 0xaecd4300}, {0, 0xf1602800}, {0, 0x7fb34900},
    {0, 0x44ed0e00}, {0, 0x7a241700}, {0, 0x95372e00}, {0, 0xff509001}, {0, 0x463ad700}, {0, 0xf6b94100}, {0, 0x8ad5a500}, {0, 0x52834501},
    {0, 0x84502700}, {0, 0x95451a00}, {0, 0xa0e3e900}, {0, 0xda865700}, {0, 0x7f406801}, {0, 0xdc6d1e01}, {0, 0xc92ff900}, {0, 0x4a285700},
    {0, 0xb3fbba00}, {0, 0xd1e74600}, {0, 0xb39f7901}, {0, 0x88041100}, {0, 0xfbafb700}, {0, 0x51545b00}, {0, 0x81364000}, {0, 0x210a6a00},
    {0, 0x3c3d4f00}, {0, 0x13f0f900}, {0, 0x5a7d0102}, {0, 0xd3250501}, {0, 0xc7c64c00}, {0, 0xb319cb00}, {0, 0xaa856400}, {0, 0x688a5800},
    {0, 0x7d1a6900}, {0, 0xac735000}, {0, 0x8a0d0200}, {0, 0xf0dde400}, {0, 0x1d97f501}, {0, 0x27b25400}, {0, 0x282f7900}, {0, 0x3bb60f00},
    {0, 0x9f871800}, {0, 0x14b66300}, {0, 0x0a623700}, {0, 0xc6202900}, {0, 0xb5b33900}, {0, 0x9f44b001}, {0, 0xa51d4f00}, {0, 0x91686d01},
    {0, 0xc6492200}, {0, 0x679c7602}, {0, 0x2c5a7901}, {0, 0xc76f0d00}, {0, 0x3efe1100}, {0, 0x4ba83600}, {0, 0x17d93d00}, {0, 0x30f74300},
    {0, 0x21936e00}, {0, 0x670ffd00}, {0, 0xadfb2901}, {0, 0x6b4f5c00}, {0, 0xaa2d8200}, {0, 0x226d5c00}, {0, 0x9233a101}, {0, 0x5878a000},
    {0, 0x55260600}, {0, 0x83a6b900}, {0, 0x35e90000}, {0, 0xd6d31700}, {0, 0xdeaebc00}, {0, 0x3e039800}, {0, 0x7caa9001}, {0, 0x4f115200},
    {0, 0x9ca33400}, {0, 0x14185100}, {0, 0x38331400}, {0, 0x703f2800}, {0, 0xf3b55c00}, {0, 0x1bf73d00}, {0, 0x8be83100}, {0, 0x2cf88200},
    {0, 0xdd535b00}, {0, 0x18322700}, {0, 0x60614000}, {0, 0x41870400}, {0, 0x3dc58a00}, {0, 0xb8f81200}, {0, 0xadaf5c00}, {0, 0xca55cd00},
    {0, 0x106f2500}, {0, 0x2ae0ae00}, {0, 0x9514d800}, {0, 0xa3e8b400}, {0, 0xe23a1c01}, {0, 0x08662700}, {0, 0xc0111901}, {0, 0xf4378400},
    {0, 0x9f3f2c00}, {0, 0xc5af1200}, {0, 0xce033601}, {0, 0xec944300}, {0, 0x70e44000}, {0, 0x4f424901}, {0, 0x19530200}, {0, 0xdf422900},
    {0, 0x0f24c600}, {0, 0x03c8a601}, {0, 0x5cc70e01}, {0, 0x05f1d200}, {0, 0x09216200}, {0, 0x34b30000}, {0, 0x470eea00}, {0, 0x20063100},
    {0, 0x431d5700}, {0, 0x1dab2c00}, {0, 0x21683e00}, {0, 0xacb07100}, {0, 0x74286100}, {0, 0xf58f0700}, {0, 0x03330300}, {0, 0x09ec3300},
    {0, 0xade12e00}, {0, 0x7ac71000}, {0, 0xf8c23500}, {0, 0x7bd3b701}, {0, 0x240e9e00}, {0, 0x0b712a00}, {0, 0x6f002000}, {0, 0xb0a66a00},
    {0, 0x4487c100}, {0, 0xe10f4501}, {0, 0x8f5e3f00}, {0, 0x0228cb00}, {0, 0x47590603}, {0, 0x18f12500}, {0, 0xac5b1f00}, {0, 0xfee93a00},
    {0, 0x38911e01}, {0, 0xe8688601}, {0, 0x7ff3c200}, {0, 0xf6c88a01}, {0, 0x1f880a00}, {0, 0xd18c6402}, {0, 0x58933100}, {0, 0x682c4200},
    {0, 0x79c43601}, {0, 0xeb606700}, {0, 0x6f35ba01}, {0, 0x61f5ac01}, {0, 0x205e4100}, {0, 0x24196500}, {0, 0x9b9e0801}, {0, 0x9fcad300},
    {0, 0x68957101}, {0, 0x4d132900}, {0, 0x7f402600}, {0, 0x48343e00}, {0, 0xc56d9902}, {0, 0x0ae56600}, {0, 0xb9a71800}, {0, 0xfde8ed00},
    {0, 0x07026001}, {0, 0x58293200}, {0, 0xa85e0700}, {0, 0x5a2b8200}, {0, 0x301d1300}, {0, 0x96e05400}, {0, 0x14d14b00}, {0, 0x8dd2a800},
    {0, 0xef636d00}, {0, 0x1b603d00}, {0, 0xa97c0000}, {0, 0x91977700}, {0, 0xbc3d4c00}, {0, 0x7bd21500}, {0, 0x47023300}, {0, 0x3c9a2d00},
    {0, 0x561b4800}, {0, 0xfac51501}, {0, 0xfd6d5100}, {0, 0xa39b7300}, {0, 0x61f73c00}, {0, 0x88446b00}, {0, 0xa39f2100}, {0, 0xb0ef5400},
    {0, 0x5f804600}, {0, 0x24cafb00}, {0, 0xcd360b00}, {0, 0x04a43200}, {0, 0x75e8ee00}, {0, 0x9da3dc00}, {0, 0x7b6d0800}, {0, 0xa2a15000},
    {0, 0x53561000}, {0, 0x9da53900}, {0, 0xa0f93801}, {0, 0x8cc03500}, {0, 0xca221f00}, {0, 0x98240800}, {0, 0x8aefea00}, {0, 0xa1be0700},
    {0, 0xf1034f00}, {0, 0xc15a8c00}, {0, 0xe5380000}, {0, 0x8c166b00}, {0, 0xf0df1c00}, {0, 0x34fc2500}, {0, 0x46b51700}, {0, 0x28e08f00},
    {0, 0x29f22c00}, {0, 0x55c23700}, {0, 0xc8616900}, {0, 0x977e7000}, {0, 0x03464200}, {0, 0x21d53900}, {0, 0xdc256d00}, {0, 0xa9a45800},
    {0, 0x63073600}, {0, 0x735c7501}, {0, 0x9049c400}, {0, 0x7c85d000}, {0, 0x41f22100}, {0, 0x9ef38100}, {0, 0x008d0202}, {0, 0x59dc0100},
    {0, 0xad5e1900}, {0, 0xfb5e7101}, {0, 0x934d4100}, {0, 0x4b34a600}, {0, 0xe9d2a200}, {0, 0x8b541200}, {0, 0xd39d5600}, {0, 0xc6738300},
    {0, 0xa460e900}, {0, 0xc5463900}, {0, 0xd8512200}, {0, 0x56025600}, {0, 0xa7bb0e00}, {0, 0x4f0cf900}, {0, 0x1bb43d00}, {0, 0x46851a00},
    {0, 0xdfb53e00}, {0, 0xf3939a00}, {0, 0x91efca00}, {0, 0xd5d61300}, {0, 0xdb0fb100}, {0, 0x309c3000}, {0, 0xcbcfff00}, {0, 0xcd695200},
    {0, 0xb3dd4400}, {0, 0x85af0a00}, {0, 0x95772f01}, {0, 0x23039201}, {0, 0xae5e8200}, {0, 0x70eb3400}, {0, 0x8f7a0500}, {0, 0x00216900},
    {0, 0xab294000}, {0, 0x121c0c00}, {0, 0x037f2b00}, {0, 0x04b60a00}, {0, 0x86480400}, {0, 0x92340b00}, {0, 0x57533e00}, {0, 0x88c91800},
    {0, 0x5aae5e01}, {0, 0x46256700}, {0, 0xd2483700}, {0, 0x5e17b800}, {0, 0x422d7f00}, {0, 0x4f852000}, {0, 0x98ad1f00}, {0, 0x70464802},
    {0, 0x11a90400}, {0, 0x65723d00}, {0, 0x89844a00}, {0, 0xe55e4e00}, {0, 0x930c1301}, {0, 0x95d72900}, {0, 0xbcf32900}, {0, 0x07d82500},
    {0, 0x15267600}, {0, 0x09982400}, {0, 0x5b972100}, {0, 0x59135001}, {0, 0x4d9c3d02}, {0, 0xf0324000}, {0, 0x5e482200}, {0, 0x8f080600},
    {0, 0xbe253301}, {0, 0x630a2000}, {0, 0xc0bd1600}, {0, 0xcb1e0c00}, {0, 0xd0d21800}, {0, 0xcfe34100}, {0, 0x19b01b00}, {0, 0x72d60400},
    {0, 0xfc7efe00}, {0, 0xc1997700}, {0, 0x1ded4500}, {0, 0x12925d00}, {0, 0x70950100}, {0, 0xb59b6201}, {0, 0x80d89400}, {0, 0xefbf0300},
    {0, 0xe2fa0e00}, {0, 0x3cb70d00}, {0, 0xaed23300}, {0, 0x47c93a00}, {0, 0x680b7300}, {0, 0xebf10c00}, {0, 0xa35a2c00}, {0, 0x1d370100},
    {0, 0x62d04700}, {0, 0x2aa77d00}, {0, 0xd4a62801}, {0, 0xb65f1900}, {0, 0x57b84000}, {0, 0xe0434f00}, {0, 0xc975ab00}, {0, 0xe3b71e00},
    {0, 0x02bf0700}, {0, 0x4ee39a00}, {0, 0xfd9e2c00}, {0, 0xc5e41c00}, {0, 0x2fd75401}, {0, 0xe5023c00}, {0, 0x52be1b01}, {0, 0x14f98500},
    {0, 0x51dda200}, {0, 0x647fe900}, {0, 0x8e2c8300}, {0, 0x77977702}, {0, 0x74046b00}, {0, 0xd6005f00}, {0, 0x66da3c00}, {0, 0xd2ab7600},
    {0, 0xdc14de00}, {0, 0xe823f900}, {0, 0x031e0c00}, {0, 0x1cb04f00}, {0, 0xec833a00}, {0, 0x2d472200}, {0, 0x2d385f00}, {0, 0x27f23500},
    {0, 0x2c6f9900}, {0, 0x8e1b7100}, {0, 0x47714200}, {0, 0xfa70fb00}, {0, 0xf4e46700}, {0, 0x53491e00}, {0, 0xd03d2901}, {0, 0x124d1200},
    {0, 0xfdd27600}, {0, 0x855d2000}, {0, 0xeb6c8900}, {0, 0xec332302}, {0, 0x38352600}, {0, 0x0aafa500}, {0, 0x31054400}, {0, 0x51e86800},
    {0, 0xdccb5201}, {0, 0x36526900}, {0, 0x8bc5be00}, {0, 0x75971400}, {0, 0xd05eb900}, {0, 0x5ef02a00}, {0, 0xa36b5400}, {0, 0x3a10ec01},
    {0, 0xa579af00}, {0, 0x2f06cb01}, {0, 0xd7bd3a00}, {0, 0x3b6c4300}, {0, 0x273e0200}, {0, 0xc5b7a000}, {0, 0x70e63400}, {0, 0x4f387800},
    {0, 0x18132400}, {0, 0xfe736b01}, {0, 0xfc2c2900}, {0, 0xf7be4000}, {0, 0xe8487e00}, {0, 0xdaca0b00}, {0, 0x2c50f300}, {0, 0x17013400},
    {0, 0xc69e1900}, {0, 0xf500dd00}, {0, 0x16411200}, {0, 0x28c31000}, {0, 0x39486200}, {0, 0x7af80500}, {0, 0xd49e0200}, {0, 0xbb160e00},
    {0, 0xe1483d00}, {0, 0x06d84a00}, {0, 0x8a000b00}, {0, 0x166b0700}, {0, 0xbf072400}, {0, 0x9fff7b00}, {0, 0xe1751700}, {0, 0x9256e900},
    {0, 0x2ab22e00}, {0, 0x2cc19400}, {0, 0x8fb61000}, {0, 0x8dd41100}, {0, 0xf086b400}, {0, 0xa258ea00}, {0, 0xb1a00100}, {0, 0xb28f1f00},
    {0, 0x5ec80e00}, {0, 0x99913701}, {0, 0x69285a00}, {0, 0xdd2c9e00}, {0, 0x54ba0800}, {0, 0x48534100}, {0, 0xf1186400}, {0, 0x4849ac00},
    {0, 0xa2885d00}, {0, 0x842d3500}, {0, 0xf9620a00}, {0, 0x53c11400}, {0, 0x8af12901}, {0, 0xbcb00500}, {0, 0x18dc2100}, {0, 0x33654800},
    {0, 0x7dbf2500}, {0, 0x3543a400}, {0, 0x551e0e01}, {0, 0xe2b84500}, {0, 0x67ae8e00}, {0, 0x1228ab00}, {0, 0x5f5a5f00}, {0, 0x988d1e00},
    {0, 0x8aea2f00}, {0, 0xbc175400}, {0, 0xb193a400}, {0, 0x3de40501}, {0, 0x56333100}, {0, 0xf22f7800}, {0, 0xea3e5900}, {0, 0x05cf5800},
    {0, 0xdb4f7a01}, {0, 0x2eef2a00}, {0, 0x98941900}, {0, 0x6d119f00}, {0, 0xcf496400}, {0, 0x059e1700}, {0, 0x48ae7901}, {0, 0x62220b00},
    {0, 0x50a7b600}, {0, 0x46764200}, {0, 0x85b02700}, {0, 0x9fce2f00}, {0, 0x56170d00}, {0, 0x3e640901}, {0, 0x98223600}, {0, 0x9f442f00},
    {0, 0xdd359201}, {0, 0x3700a100}, {0, 0xe4f56801}, {0, 0x84d60000}, {0, 0xbee63900}, {0, 0x94c9e700}, {0, 0xce948601}, {0, 0x30412500},
    {0, 0x0838f601}, {0, 0x4d6b5601}, {0, 0xb4fb1f00}, {0, 0x0e361000}, {0, 0x30e68d00}, {0, 0x0f8b1900}, {0, 0xe0c0fc00}, {0, 0x60552900},
    {0, 0xe1847b00}, {0, 0x8ea26c01}, {0, 0xf8db0500}, {0, 0xaafbea00}, {0, 0x7a1e6000}, {0, 0xa87a8e01}, {0, 0x8c9a1c00}, {0, 0x50e7ab00},
    {0, 0x449d4300}, {0, 0x1e532100}, {0, 0xc7c30c00}, {0, 0x826e5b00}, {0, 0xc4570400}, {0, 0xab6e2700}, {0, 0xe47f0500}, {0, 0xd0180000},
    {0, 0xa9d67800}, {0, 0x85725000}, {0, 0x7fc52a00}, {0, 0xa75d1000}, {0, 0xbe38b800}, {0, 0x56c41c01}, {0, 0x943a0400}, {0, 0xebd1a701},
    {0, 0x26ad2200}, {0, 0x3d2d3300}, {0, 0xdd9a6e00}, {0, 0x5fb40c00}, {0, 0x0c681a02}, {0, 0x7d0ef500}, {0, 0xe82c1500}, {0, 0x54e82501},
    {0, 0x8fb86500}, {0, 0x6a68a902}, {0, 0x19ccac00}, {0, 0x05f83c00}, {0, 0x96601800}, {0, 0xdf530f00}, {0, 0x81021200}, {0, 0x3adf4202},
    {0, 0x72c19200}, {0, 0x8e1b0600}, {0, 0xfe363700}, {0, 0x464c7100}, {0, 0x39730b00}, {0, 0x76f04b00}, {0, 0x901b6c00}, {0, 0x8e061000},
    {0, 0x8cbb2800}, {0, 0xff7a5e00}, {0, 0x8f8d4b00}, {0, 0x0be11f00}, {0, 0x9451a000}, {0, 0x09a02f01}, {0, 0x32121a00}, {0, 0x58eb2e00},
    {0, 0x746e3600}, {0, 0xfdd56300}, {0, 0xce033900}, {0, 0xd605ab00}, {0, 0xbc513a00}, {0, 0xa26ac600}, {0, 0x6ef31b01}, {0, 0x131a2500},
    {0, 0x0fef0800}, {0, 0x544a0000}, {0, 0xd9f89900}, {0, 0xe5eb4300}, {0, 0x481e5600}, {0, 0xe466e203}, {0, 0x96435701}, {0, 0x44058500},
    {0, 0x59bf2000}, {0, 0x2c2a3b01}, {0, 0x880d8b00}, {0, 0x669a2800}, {0, 0x8f43cc00}, {0, 0x5d1b0800}, {0, 0xebfcb400}, {0, 0x823b0c00},
    {0, 0x77be1e00}, {0, 0x358d0b00}, {0, 0x214c5c00}, {0, 0x80995a01}, {0, 0x01141d00}, {0, 0xd8811600}, {0, 0x5db33a00}, {0, 0x55e31100},
    {0, 0x043c6200}, {0, 0xd79e3d00}, {0, 0x8adf2c00}, {0, 0x10c71300}, {0, 0x37be9300}, {0, 0x72e40d00}, {0, 0xdca05e00}, {0, 0xe0c41000},
    {0, 0x81501d00}, {0, 0xf6382301}, {0, 0xf0604900}, {0, 0xe7500f00}, {0, 0x3af33800}, {0, 0x29b07500}, {0, 0x686bc700}, {0, 0xbe79bc00},
    {0, 0x29bf9500}, {0, 0xa9fb6c00}, {0, 0xa71f0001}, {0, 0x9fa08600}, {0, 0xe3175600}, {0, 0xb234c900}, {0, 0xe2f06000}, {0, 0xe7394a00},
    {0, 0xf7fd3501}, {0, 0xfd789000}, {0, 0xcbbb7601}, {0, 0xd2f0d601}, {0, 0xeb474900}, {0, 0x53a88700}, {0, 0xbfa22b01}, {0, 0x2b660e01},
    {0, 0x08a44e00}, {0, 0x2c180a00}, {0, 0x0cff5b00}, {0, 0xb7a45700}, {0, 0x40286900}, {0, 0x43aa3300}, {0, 0x92511900}, {0, 0xd7ff9400},
    {0, 0x556e9a00}, {0, 0x14172e00}, {0, 0x21a64800}, {0, 0xd9316d00}, {0, 0x251ee701}, {0, 0xddca4d00}, {0, 0x945d3b00}, {0, 0x27c4d300},
    {0, 0xcf131000}, {0, 0xd3443f00}, {0, 0x62e07c00}, {0, 0x447ac400}, {0, 0x460d0300}, {0, 0x3db30700}, {0, 0xf07c6b00}, {0, 0x0e030e00},
    {0, 0xa6ab4100}, {0, 0x89567201}, {0, 0xe3464e00}, {0, 0xb6638000}, {0, 0x0f824a00}, {0, 0xfd861300}, {0, 0x277b5300}, {0, 0x338c6500},
    {0, 0x885a6b00}, {0, 0x1a4e8000}, {0, 0xc8ce1700}, {0, 0x71183200}, {0, 0x76408d00}, {0, 0x245f0d00}, {0, 0xb1946a00}, {0, 0x45402b00},
    {0, 0xcd030e00}, {0, 0x60ce6501}, {0, 0x70da6200}, {0, 0x999e7200}, {0, 0x42875800}, {0, 0xb2289100}, {0, 0xf968b100}, {0, 0x6f860600},
    {0, 0xa1115800}, {0, 0x95118600}, {0, 0x25e56500}, {0, 0xebd1bd00}, {0, 0x6b6e0100}, {0, 0x831b1200}, {0, 0xb4ad2d00}, {0, 0x92743e00},
    {0, 0x48677500}, {0, 0xede28300}, {0, 0x3f037300}, {0, 0x69cfef00}, {0, 0xd05a1502}, {0, 0xb6c88300}, {0, 0x9adc0500}, {0, 0x7b332701},
    {0, 0x5c415900}, {0, 0xaef61500}, {0, 0xf58b5f00}, {0, 0x1acf4600}, {0, 0xda682300}, {0, 0x3d215500}, {0, 0x906e0500}, {0, 0x3f2adc00},
    {0, 0xd5bd9700}, {0, 0xcef86900}, {0, 0x7cd34f00}, {0, 0x5b405c00}, {0, 0x189f4200}, {0, 0x00f30700}, {0, 0x43aead01}, {0, 0x87655900},
    {0, 0x39691700}, {0, 0xe90d0700}, {0, 0x86062e00}, {0, 0xf02b5700}, {0, 0x80217100}, {0, 0xcc462e00}, {0, 0x32eddf00}, {0, 0x4e2aa500},
    {0, 0xd981bd00}, {0, 0xaf35b700}, {0, 0x6b222d00}, {0, 0x94780000}, {0, 0xaa15bf01}, {0, 0x30b8b000}, {0, 0xa7ed7100}, {0, 0x76b10700},
    {0, 0x02964000}, {0, 0xce665300}, {0, 0xce981500}, {0, 0x3e082a00}, {0, 0xd6592d00}, {0, 0x93ef7b00}, {0, 0x65032100}, {0, 0xf4424a00},
    {0, 0x24740300}, {0, 0x773b7e00}, {0, 0xa8491800}, {0, 0xfee22e00}, {0, 0xb57a1200}, {0, 0x2ab59800}, {0, 0x2ec08900}, {0, 0xe900f901},
    {0, 0xe736b200}, {0, 0xce9fb800}, {0, 0xd0958200}, {0, 0xfbd09800}, {0, 0xa42dba00}, {0, 0xe3278000}, {0, 0xd6392500}, {0, 0x74985f00},
    {0, 0xd9830b00}, {0, 0x672a3900}, {0, 0xe0d7f600}, {0, 0x4f341f00}, {0, 0x96743a00}, {0, 0xc0524e00}, {0, 0xbc5e7600}, {0, 0x87661500},
    {0, 0xb3552200}, {0, 0x80c67500}, {0, 0x0b425a00}, {0, 0xc15f3000}, {0, 0x8cdd0000}, {0, 0x98cd7e00}, {0, 0xd5a53000}, {0, 0x5d812000},
    {0, 0x0e948a00}, {0, 0xbec73a00}, {0, 0xa1964f00}, {0, 0x36943000}, {0, 0x95ea7d00}, {0, 0xfe1db302}, {0, 0xc5c44600}, {0, 0x89c13000},
    {0, 0x4f243d00}, {0, 0x3cf53800}, {0, 0xac78ec00}, {0, 0x9da46001}, {0, 0x1f4e8700}, {0, 0xf9dd6c00}, {0, 0x5ece5100}, {0, 0x95b07600},
    {0, 0xc4391700}, {0, 0x56db4601}, {0, 0xc9504c00}, {0, 0x86d53c00}, {0, 0xc6892100}, {0, 0x7fa2ae00}, {0, 0x3b921b01}, {0, 0x7b823b01},
    {0, 0x88b3f400}, {0, 0xc09d5301}, {0, 0x66813800}, {0, 0x60d73302}, {0, 0x2a372100}, {0, 0x6ce82c00}, {0, 0xc7f00100}, {0, 0x25a96f00},
    {0, 0x6c5c4100}, {0, 0x656d1200}, {0, 0x51b81e00}, {0, 0x82787b00}, {0, 0x6fcc2000}, {0, 0xa6da5d00}, {0, 0x381d0600}, {0, 0x0d242f00},
    {0, 0x2190c700}, {0, 0x616c2100}, {0, 0xc0c57800}, {0, 0xa3db0600}, {0, 0x394b1e00}, {0, 0x806c5c00}, {0, 0xb73e5702}, {0, 0xbbd12300},
    {0, 0x75919600}, {0, 0xe46c7501}, {0, 0xbb014f00}, {0, 0x47725600}, {0, 0x763b7f00}, {0, 0xdaed2000}, {0, 0x1159b900}, {0, 0x83704800},
    {0, 0x81410f01}, {0, 0x99d21d00}, {0, 0x60007902}, {0, 0x3460e500}, {0, 0xc427a400}, {0, 0x67a7b500}, {0, 0xa0e56200}, {0, 0x456ee100},
    {0, 0xa7e38401}, {0, 0x172ad700}, {0, 0x5fde5301}, {0, 0x67119200}, {0, 0x15404700}, {0, 0xe0cf7400}, {0, 0xbe82ec00}, {0, 0xbf290100},
    {0, 0x7b0b2400}, {0, 0xe4b86600}, {0, 0x0edf1700}, {0, 0x98c82500}, {0, 0x289aec00}, {0, 0x05481f00}, {0, 0x64b65d00}, {0, 0x9d04e800},
    {0, 0xa8490d00}, {0, 0x9cc51900}, {0, 0xab411e00}, {0, 0xa825a800}, {0, 0x8c794e00}, {0, 0x43541100}, {0, 0x1b407600}, {0, 0x73899700},
    {0, 0x76ee4801}, {0, 0x2bceb800}, {0, 0xec9a0300}, {0, 0x25840000}, {0, 0xbfd99d00}, {0, 0x85ca0a00}, {0, 0xe1d69600}, {0, 0x03680101},
    {0, 0x742b5e00}, {0, 0x5cbf2900}, {0, 0x156d4d00}, {0, 0x940e5800}, {0, 0xc0289900}, {0, 0xf9025a00}, {0, 0x56213c00}, {0, 0x2d2f0700},
    {0, 0xd0561400}, {0, 0xeeab1d00}, {0, 0xc5d11c00}, {0, 0xe7701901}, {0, 0x329a5300}, {0, 0x7e4bb300}, {0, 0xeec10a01}, {0, 0x04f1b201},
    {0, 0x08265b00}, {0, 0x01fac200}, {0, 0x10396300}, {0, 0x60adbb01}, {0, 0xe7806900}, {0, 0x1bb39500}, {0, 0x94438300}, {0, 0xa10bd101},
    {0, 0x2981b600}, {0, 0x0d5f5b00}, {0, 0x8c332d01}, {0, 0x41c1d400}, {0, 0x0bad6700}, {0, 0x62b52c00}, {0, 0x425a1a01}, {0, 0x649fb300},
    {0, 0x11977001}, {0, 0x4ad63400}, {0, 0x52bf7500}, {0, 0x5b352c00}, {0, 0xc8522200}, {0, 0x33ef1b00}, {0, 0x407e1a01}, {0, 0xc2f38900},
    {0, 0x46b33500}, {0, 0x6adc4d00}, {0, 0xded00f00}, {0, 0x2e834a00}, {0, 0xdc8d1700}, {0, 0xc0f21d00}, {0, 0xa23c3901}, {0, 0xa23a4d00},
    {0, 0x69e91d00}, {0, 0x9e091400}, {0, 0x07de2a00}, {0, 0xc7068800}, {0, 0x192f4d00}, {0, 0x1b04f500}, {0, 0xb0aa3000}, {0, 0x41567100},
    {0, 0x5b5f3000}, {0, 0xa39c2400}, {0, 0xb2603600}, {0, 0x472cde00}, {0, 0x41792700}, {0, 0xff504700}, {0, 0x149dc600}, {0, 0x96072300},
    {0, 0x1cc87700}, {0, 0x2d5d8400}, {0, 0x8a722c00}, {0, 0x4cf00d00}, {0, 0xfd0cb400}, {0, 0x874d5a01}, {0, 0x367ec600}, {0, 0x81c1d100},
    {0, 0xbc738a00}, {0, 0x3b633900}, {0, 0x19442700}, {0, 0x8ec91000}, {0, 0x61100a01}, {0, 0xb7c67800}, {0, 0xbd3e2e01}, {0, 0xc634f800},
    {0, 0x7d0e7c02}, {0, 0xe5dec100}, {0, 0xfac5ed00}, {0, 0x2e5fea02}, {0, 0x67728500}, {0, 0x0c7f3301}, {0, 0x7d4d8305},
};

CBlockIndex CreateBlockIndex(int nHeight)
{
    CBlockIndex index;
    index.nHeight = nHeight;
    index.pprev = chainActive.Tip();
    return index;
}

bool TestSequenceLocks(const CTransaction &tx, int flags)
{
    LOCK(mempool.cs);
    return CheckSequenceLocks(tx, flags);
}

// Test suite for ancestor feerate transaction selection.
// Implemented as an additional function, rather than a separate test case,
// to allow reusing the blockchain created in CreateNewBlock_validity.
// Note that this test assumes blockprioritysize is 0.
void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey, std::vector<CTransaction *>& txFirst)
{
    // Test the ancestor feerate transaction selection.
    TestMemPoolEntryHelper entry;

    // Test that a medium fee transaction will be selected after a higher fee
    // rate package with a low fee rate parent.
    CMutableTransaction tx;
    tx.vin.resize(1);
    tx.vin[0].scriptSig = CScript() << OP_1;
    tx.vin[0].prevout.hash = txFirst[1]->GetHash();
    tx.vin[0].prevout.n = 0;
    tx.vout.resize(1);
    tx.vout[0].nValue = 1000000000LL - 1000;
    // This tx has a low fee: 1000 satoshis
    uint256 hashParentTx = tx.GetHash(); // save this txid for later use
    mempool.addUnchecked(hashParentTx, entry.Fee(1000).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));

    // This tx has a medium fee: 10000 satoshis
    tx.vin[0].prevout.hash = txFirst[0]->GetHash();
    tx.vout[0].nValue = 1000000000LL - 10000;
    uint256 hashMediumFeeTx = tx.GetHash();
    mempool.addUnchecked(hashMediumFeeTx, entry.Fee(10000).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));

    // This tx has a high fee, but depends on the first transaction
    tx.vin[0].prevout.hash = hashParentTx;
    tx.vout[0].nValue = 1000000000LL - 1000 - 50000; // 50k satoshi fee
    uint256 hashHighFeeTx = tx.GetHash();
    mempool.addUnchecked(hashHighFeeTx, entry.Fee(50000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));

    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);
    BOOST_CHECK(pblocktemplate->block.vtx[1].GetHash() == hashParentTx);
    BOOST_CHECK(pblocktemplate->block.vtx[2].GetHash() == hashHighFeeTx);
    BOOST_CHECK(pblocktemplate->block.vtx[3].GetHash() == hashMediumFeeTx);

    // Test that a package below the min relay fee doesn't get included
    tx.vin[0].prevout.hash = hashHighFeeTx;
    tx.vout[0].nValue = 1000000000LL - 1000 - 50000; // 0 fee
    uint256 hashFreeTx = tx.GetHash();
    mempool.addUnchecked(hashFreeTx, entry.Fee(0).FromTx(tx));
    size_t freeTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);

    // Calculate a fee on child transaction that will put the package just
    // below the min relay fee (assuming 1 child tx of the same size).
    CAmount feeToUse = minRelayTxFee.GetFee(2*freeTxSize) - 1;

    tx.vin[0].prevout.hash = hashFreeTx;
    tx.vout[0].nValue = 1000000000LL - 1000 - 50000 - feeToUse;
    uint256 hashLowFeeTx = tx.GetHash();
    mempool.addUnchecked(hashLowFeeTx, entry.Fee(feeToUse).FromTx(tx));
    pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);
    // Verify that the free tx and the low fee tx didn't get selected
    for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {
        BOOST_CHECK(pblocktemplate->block.vtx[i].GetHash() != hashFreeTx);
        BOOST_CHECK(pblocktemplate->block.vtx[i].GetHash() != hashLowFeeTx);
    }

    // Test that packages above the min relay fee do get included, even if one
    // of the transactions is below the min relay fee
    // Remove the low fee transaction and replace with a higher fee transaction
    std::list<CTransaction> dummy;
    mempool.removeRecursive(tx, dummy);
    tx.vout[0].nValue -= 2; // Now we should be just over the min relay fee
    hashLowFeeTx = tx.GetHash();
    mempool.addUnchecked(hashLowFeeTx, entry.Fee(feeToUse+2).FromTx(tx));
    pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);
    BOOST_CHECK(pblocktemplate->block.vtx[4].GetHash() == hashFreeTx);
    BOOST_CHECK(pblocktemplate->block.vtx[5].GetHash() == hashLowFeeTx);

    // Test that transaction selection properly updates ancestor fee
    // calculations as ancestor transactions get included in a block.
    // Add a 0-fee transaction that has 2 outputs.
    tx.vin[0].prevout.hash = txFirst[2]->GetHash();
    tx.vout.resize(2);
    tx.vout[0].nValue = 1000000000LL - 100000000;
    tx.vout[1].nValue = 100000000; // 1BTC output
    uint256 hashFreeTx2 = tx.GetHash();
    mempool.addUnchecked(hashFreeTx2, entry.Fee(0).SpendsCoinbase(true).FromTx(tx));

    // This tx can't be mined by itself
    tx.vin[0].prevout.hash = hashFreeTx2;
    tx.vout.resize(1);
    feeToUse = minRelayTxFee.GetFee(freeTxSize);
    tx.vout[0].nValue = 1000000000LL - 100000000 - feeToUse;
    uint256 hashLowFeeTx2 = tx.GetHash();
    mempool.addUnchecked(hashLowFeeTx2, entry.Fee(feeToUse).SpendsCoinbase(false).FromTx(tx));
    pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);

    // Verify that this tx isn't selected.
    for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {
        BOOST_CHECK(pblocktemplate->block.vtx[i].GetHash() != hashFreeTx2);
        BOOST_CHECK(pblocktemplate->block.vtx[i].GetHash() != hashLowFeeTx2);
    }

    // This tx will be mineable, and should cause hashLowFeeTx2 to be selected
    // as well.
    tx.vin[0].prevout.n = 1;
    tx.vout[0].nValue = 100000000 - 100000; // 10k satoshi fee
    mempool.addUnchecked(tx.GetHash(), entry.Fee(100000).FromTx(tx));
    pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);
    BOOST_CHECK(pblocktemplate->block.vtx[8].GetHash() == hashLowFeeTx2);
}

// NOTE: These tests rely on CreateNewBlock doing its own self-validation!
BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)
{
    // Note that by default, these tests run with size accounting enabled.
    const CChainParams& chainparams = Params(CBaseChainParams::MAIN);
    CScript scriptPubKey = CScript() << ParseHex("04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f") << OP_CHECKSIG;

    std::unique_ptr<CBlockTemplate> pblocktemplate;
    CMutableTransaction tx,tx2;
    CScript script;
    uint256 hash;
    TestMemPoolEntryHelper entry;
    entry.nFee = 11;
    entry.dPriority = 111.0;
    entry.nHeight = 11;

    LOCK(cs_main);
    fCheckpointsEnabled = false;

    // Simple block creation, nothing special yet:
    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));

    // We can't make transactions until we have inputs
    // Therefore, load some blocks using the blockinfo struct
    int baseheight = 0;
    std::vector<CTransaction*>txFirst;
    for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i)
    {
        // Viacoin: Begin
        if (i == 1 || i >= 3599) {
            // Viacoin needs coinbase value reset after first block; diff change starts at block 3600
            uint256 hashPrevBlock = pblocktemplate->block.hashPrevBlock;
            pblocktemplate.reset();
            BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));
            pblocktemplate->block.hashPrevBlock = hashPrevBlock;
        }
        // Viacoin: End
        CBlock *pblock = &pblocktemplate->block; // pointer for convenience
        pblock->nVersion = 1;
        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;
        CMutableTransaction txCoinbase(pblock->vtx[0]);
        txCoinbase.nVersion = 1;
        txCoinbase.vin[0].scriptSig = CScript();
        txCoinbase.vin[0].scriptSig.push_back(blockinfo[i].extranonce);
        txCoinbase.vin[0].scriptSig.push_back(chainActive.Height() >> 8); // Viacoin
        txCoinbase.vin[0].scriptSig.push_back(chainActive.Height());
        txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)
        txCoinbase.vout[0].scriptPubKey = CScript();
        pblock->vtx[0] = CTransaction(txCoinbase);
        if (txFirst.size() == 0)
            baseheight = chainActive.Height();
        if (txFirst.size() < 4)
            txFirst.push_back(new CTransaction(pblock->vtx[0]));
        pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);
        pblock->nNonce = blockinfo[i].nonce;
        CValidationState state;
        BOOST_CHECK(ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL, false));
        BOOST_CHECK(state.IsValid());
        pblock->hashPrevBlock = pblock->GetHash();
    }
    pblocktemplate.reset();

    // Just to make sure we can still make simple blocks
    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));
    pblocktemplate.reset();

    const CAmount BLOCKSUBSIDY = 10*COIN;
    const CAmount LOWFEE = CENT/100;
    const CAmount HIGHFEE = CENT/10;
    const CAmount HIGHERFEE = CENT;

    // block sigops > limit: 1000 CHECKMULTISIG + 1
    tx.vin.resize(1);
    // NOTE: OP_NOP is used to force 20 SigOps for the CHECKMULTISIG
    tx.vin[0].scriptSig = CScript() << OP_0 << OP_0 << OP_0 << OP_NOP << OP_CHECKMULTISIG << OP_1;
    tx.vin[0].prevout.hash = txFirst[0]->GetHash();
    tx.vin[0].prevout.n = 0;
    tx.vout.resize(1);
    tx.vout[0].nValue = BLOCKSUBSIDY;
    for (unsigned int i = 0; i < 800; ++i)
    {
        tx.vout[0].nValue -= LOWFEE;
        hash = tx.GetHash();
        bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase
        // If we don't set the # of sig ops in the CTxMemPoolEntry, template creation fails
        mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));
        tx.vin[0].prevout.hash = hash;
    }
    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);
    mempool.clear();

    tx.vin[0].prevout.hash = txFirst[0]->GetHash();
    tx.vout[0].nValue = BLOCKSUBSIDY;
    for (unsigned int i = 0; i < 1001; ++i)
    {
        tx.vout[0].nValue -= LOWFEE;
        hash = tx.GetHash();
        bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase
        // If we do set the # of sig ops in the CTxMemPoolEntry, template creation passes
        mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOpsCost(80).FromTx(tx));
        tx.vin[0].prevout.hash = hash;
    }
    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));
    pblocktemplate.reset();
    mempool.clear();

    // block size > limit
    tx.vin[0].scriptSig = CScript();
    // 18 * (520char + DROP) + OP_1 = 9433 bytes
    std::vector<unsigned char> vchData(520);
    for (unsigned int i = 0; i < 18; ++i)
        tx.vin[0].scriptSig << vchData << OP_DROP;
    tx.vin[0].scriptSig << OP_1;
    tx.vin[0].prevout.hash = txFirst[0]->GetHash();
    tx.vout[0].nValue = BLOCKSUBSIDY;
    for (unsigned int i = 0; i < 128; ++i)
    {
        tx.vout[0].nValue -= LOWFEE;
        hash = tx.GetHash();
        bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase
        mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));
        tx.vin[0].prevout.hash = hash;
    }
    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));
    pblocktemplate.reset();
    mempool.clear();

    // orphan in mempool, template creation fails
    hash = tx.GetHash();
    mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).FromTx(tx));
    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);
    mempool.clear();

    // child with higher priority than parent
    tx.vin[0].scriptSig = CScript() << OP_1;
    tx.vin[0].prevout.hash = txFirst[1]->GetHash();
    tx.vout[0].nValue = BLOCKSUBSIDY-HIGHFEE;
    hash = tx.GetHash();
    mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));
    tx.vin[0].prevout.hash = hash;
    tx.vin.resize(2);
    tx.vin[1].scriptSig = CScript() << OP_1;
    tx.vin[1].prevout.hash = txFirst[0]->GetHash();
    tx.vin[1].prevout.n = 0;
    tx.vout[0].nValue = tx.vout[0].nValue+BLOCKSUBSIDY-HIGHERFEE; //First txn output + fresh coinbase - new txn fee
    hash = tx.GetHash();
    mempool.addUnchecked(hash, entry.Fee(HIGHERFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));
    // Viacoin has zero reward in genesys, unspendable
    // BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));
    pblocktemplate.reset();
    mempool.clear();


    // coinbase in mempool, template creation fails
    tx.vin.resize(1);
    tx.vin[0].prevout.SetNull();
    tx.vin[0].scriptSig = CScript() << OP_0 << OP_1;
    tx.vout[0].nValue = 0;
    hash = tx.GetHash();
    // give it a fee so it'll get mined
    mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));
    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);
    mempool.clear();

    // invalid (pre-p2sh) txn in mempool, template creation fails
    tx.vin[0].prevout.hash = txFirst[1]->GetHash();
    tx.vin[0].prevout.n = 0;
    tx.vin[0].scriptSig = CScript() << OP_1;
    tx.vout[0].nValue = BLOCKSUBSIDY-LOWFEE;
    script = CScript() << OP_0;
    tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));
    hash = tx.GetHash();
    mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));
    tx.vin[0].prevout.hash = hash;
    tx.vin[0].scriptSig = CScript() << std::vector<unsigned char>(script.begin(), script.end());
    tx.vout[0].nValue -= LOWFEE;
    hash = tx.GetHash();
    mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));
    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);
    mempool.clear();

    // double spend txn pair in mempool, template creation fails
    tx.vin[0].prevout.hash = txFirst[0]->GetHash();
    tx.vin[0].scriptSig = CScript() << OP_1;
    tx.vout[0].nValue = BLOCKSUBSIDY-HIGHFEE;
    tx.vout[0].scriptPubKey = CScript() << OP_1;
    hash = tx.GetHash();
    mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));
    tx.vout[0].scriptPubKey = CScript() << OP_2;
    hash = tx.GetHash();
    mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));
    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);
    mempool.clear();

    // subsidy changing
    int nHeight = chainActive.Height();
    // Create an actual 209999-long block chain (without valid blocks).
    while (chainActive.Tip()->nHeight < 839999) {
        CBlockIndex* prev = chainActive.Tip();
        CBlockIndex* next = new CBlockIndex();
        next->phashBlock = new uint256(GetRandHash());
        pcoinsTip->SetBestBlock(next->GetBlockHash());
        next->pprev = prev;
        next->nHeight = prev->nHeight + 1;
        next->BuildSkip();
        chainActive.SetTip(next);
    }
    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));
    pblocktemplate.reset();
    // Extend to a 210000-long block chain.
    while (chainActive.Tip()->nHeight < 840000) {
        CBlockIndex* prev = chainActive.Tip();
        CBlockIndex* next = new CBlockIndex();
        next->phashBlock = new uint256(GetRandHash());
        pcoinsTip->SetBestBlock(next->GetBlockHash());
        next->pprev = prev;
        next->nHeight = prev->nHeight + 1;
        next->BuildSkip();
        chainActive.SetTip(next);
    }
    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));
    pblocktemplate.reset();
    // Delete the dummy blocks again.
    while (chainActive.Tip()->nHeight > nHeight) {
        CBlockIndex* del = chainActive.Tip();
        chainActive.SetTip(del->pprev);
        pcoinsTip->SetBestBlock(del->pprev->GetBlockHash());
        delete del->phashBlock;
        delete del;
    }

    // non-final txs in mempool
    SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);
    int flags = LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST;
    // height map
    std::vector<int> prevheights;

    // relative height locked
    tx.nVersion = 2;
    tx.vin.resize(1);
    prevheights.resize(1);
    tx.vin[0].prevout.hash = txFirst[0]->GetHash(); // only 1 transaction
    tx.vin[0].prevout.n = 0;
    tx.vin[0].scriptSig = CScript() << OP_1;
    tx.vin[0].nSequence = chainActive.Tip()->nHeight + 1; // txFirst[0] is the 2nd block
    prevheights[0] = baseheight + 1;
    tx.vout.resize(1);
    tx.vout[0].nValue = BLOCKSUBSIDY-HIGHFEE;
    tx.vout[0].scriptPubKey = CScript() << OP_1;
    tx.nLockTime = 0;
    hash = tx.GetHash();
    mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));
    BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes
    BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail
    BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 2))); // Sequence locks pass on 2nd block

    // relative time locked
    tx.vin[0].prevout.hash = txFirst[1]->GetHash();
    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((chainActive.Tip()->GetMedianTimePast()+1-chainActive[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block
    prevheights[0] = baseheight + 2;
    hash = tx.GetHash();
    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));
    BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes
    BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail

    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)
        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast
    BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1))); // Sequence locks pass 512 seconds later
    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)
        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP

    // absolute height locked
    tx.vin[0].prevout.hash = txFirst[2]->GetHash();
    tx.vin[0].nSequence = CTxIn::SEQUENCE_FINAL - 1;
    prevheights[0] = baseheight + 3;
    tx.nLockTime = chainActive.Tip()->nHeight + 1;
    hash = tx.GetHash();
    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));
    BOOST_CHECK(!CheckFinalTx(tx, flags)); // Locktime fails
    BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass
    BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())); // Locktime passes on 2nd block

    // absolute time locked
    tx.vin[0].prevout.hash = txFirst[3]->GetHash();
    tx.nLockTime = chainActive.Tip()->GetMedianTimePast();
    prevheights.resize(1);
    prevheights[0] = baseheight + 4;
    hash = tx.GetHash();
    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));
    BOOST_CHECK(!CheckFinalTx(tx, flags)); // Locktime fails
    BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass
    BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later

    // mempool-dependent transactions (not added)
    tx.vin[0].prevout.hash = hash;
    prevheights[0] = chainActive.Tip()->nHeight + 1;
    tx.nLockTime = 0;
    tx.vin[0].nSequence = 0;
    BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes
    BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass
    tx.vin[0].nSequence = 1;
    BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail
    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG;
    BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass
    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | 1;
    BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail

    // Viacoin cannot spend multiple inputs as starting blocks have a single non-zero one
/*
    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));
    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 2);

    // None of the of the absolute height/time locked tx should have made
    // it into the template because we still check IsFinalTx in CreateNewBlock,
    // but relative locked txs will if inconsistently added to mempool.
    // For now these will still generate a valid template until BIP68 soft fork
    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);
    pblocktemplate.reset();
    // However if we advance height by 1 and time by 512, all of them should be mined
    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)
        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast
    chainActive.Tip()->nHeight++;
    SetMockTime(chainActive.Tip()->GetMedianTimePast() + 1);

    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));
    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5);
    pblocktemplate.reset();
    chainActive.Tip()->nHeight--;
*/
    SetMockTime(0);
    mempool.clear();

    // Viacoin cannot spend multiple inputs as starting blocks have a single non-zero one
    //TestPackageSelection(chainparams, scriptPubKey, txFirst);

    BOOST_FOREACH(CTransaction *_tx, txFirst)
        delete _tx;

    fCheckpointsEnabled = true;
}

BOOST_AUTO_TEST_SUITE_END()
